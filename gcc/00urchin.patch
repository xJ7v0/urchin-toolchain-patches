diff --git a/fixincludes/mkfixinc.sh b/fixincludes/mkfixinc.sh
index df90720b7..bde9b7883 100755
--- a/fixincludes/mkfixinc.sh
+++ b/fixincludes/mkfixinc.sh
@@ -20,7 +20,8 @@ case $machine in
     powerpcle-*-eabisim* | \
     powerpcle-*-eabi* | \
     *-*-vxworks7* | \
-    *-musl* )
+    *-musl* | \
+    *-urchin*)
 	#  IF there is no include fixing,
 	#  THEN create a no-op fixer and exit
 	(echo "#! /bin/sh" ; echo "exit 0" ) > ${target}
diff --git a/gcc/config.gcc b/gcc/config.gcc
index a3566f5c7..78e3dfa3e 100644
--- a/gcc/config.gcc
+++ b/gcc/config.gcc
@@ -693,7 +693,7 @@ case ${target} in
 esac
 
 # Common C libraries.
-tm_defines="$tm_defines LIBC_GLIBC=1 LIBC_UCLIBC=2 LIBC_BIONIC=3 LIBC_MUSL=4"
+tm_defines="$tm_defines LIBC_GLIBC=1 LIBC_UCLIBC=2 LIBC_BIONIC=3 LIBC_MUSL=4 LIBC_URCHIN=5"
 
 # 32-bit x86 processors supported by --with-arch=.  Each processor
 # MUST be separated by exactly one space.
@@ -919,6 +919,9 @@ case ${target} in
     *-*-*musl*)
       tm_defines="$tm_defines DEFAULT_LIBC=LIBC_MUSL"
       ;;
+    *-*-*urchin*)
+      tm_defines="$tm_defines DEFAULT_LIBC=LIBC_URCHIN"
+      ;;
     *)
       tm_defines="$tm_defines DEFAULT_LIBC=LIBC_GLIBC"
       ;;
@@ -3102,6 +3105,8 @@ powerpc*-*-linux*)
 	case ${target} in
 	    *-linux*-musl*)
 		enable_secureplt=yes ;;
+	    *-linux*-urchin*)
+		enable_secureplt=yes ;;
 	esac
 	if test x${enable_secureplt} = xyes; then
 		tm_file="rs6000/secureplt.h ${tm_file}"
@@ -3641,6 +3646,9 @@ case ${target} in
 *-linux-musl*)
 	tmake_file="${tmake_file} t-musl"
 	;;
+*-linux-urchin*)
+	tmake_file="${tmake_file} t-urchin"
+	;;
 *-linux-uclibc*)
 	tmake_file="${tmake_file} t-uclibc"
 	;;
@@ -3649,7 +3657,7 @@ esac
 # Assume the existence of indirect function support and allow the use of the
 # resolver attribute.
 case ${target} in
-*-*-linux*android*|*-*-linux*uclibc*|*-*-linux*musl*)
+*-*-linux*android*|*-*-linux*uclibc*|*-*-linux*musl*|*-*-linux*musl*)
         ;;
 *-*-kfreebsd*-gnu | *-*-kopensolaris*-gnu)
         ;;
@@ -5064,6 +5072,7 @@ case "${target}" in
 		case ${target} in
 		  *-linux-gnu*) triplet_os="linux-gnu";;
 		  *-linux-musl*) triplet_os="linux-musl";;
+		  *-linux-urchin*) triplet_os="linux-urchin";;
 		  *-elf*) triplet_os="elf";;
 		  *)
 			  echo "Unsupported target ${target}." 1>&2
diff --git a/gcc/config/aarch64/aarch64-linux.h b/gcc/config/aarch64/aarch64-linux.h
index 8e51c8202..0cf944bab 100644
--- a/gcc/config/aarch64/aarch64-linux.h
+++ b/gcc/config/aarch64/aarch64-linux.h
@@ -26,6 +26,9 @@
 #undef MUSL_DYNAMIC_LINKER
 #define MUSL_DYNAMIC_LINKER "/lib/ld-musl-aarch64%{mbig-endian:_be}%{mabi=ilp32:_ilp32}.so.1"
 
+#undef URCHIN_DYNAMIC_LINKER
+#define URCHIN_DYNAMIC_LINKER "/lib/ld-urchin-aarch64%{mbig-endian:_be}%{mabi=ilp32:_ilp32}.so.1"
+
 #undef  ASAN_CC1_SPEC
 #define ASAN_CC1_SPEC "%{%:sanitize(address):-funwind-tables}"
 
diff --git a/gcc/config/arm/linux-eabi.h b/gcc/config/arm/linux-eabi.h
index eef791f6a..8a8e26f1e 100644
--- a/gcc/config/arm/linux-eabi.h
+++ b/gcc/config/arm/linux-eabi.h
@@ -88,6 +88,23 @@
 #define MUSL_DYNAMIC_LINKER \
   "/lib/ld-musl-arm" MUSL_DYNAMIC_LINKER_E "%{mfloat-abi=hard:hf}%{mfdpic:-fdpic}.so.1"
 
+/* For ARM urchin currently supports four dynamic linkers:
+   - ld-urchin-arm.so.1 - for the EABI-derived soft-float ABI
+   - ld-urchin-armhf.so.1 - for the EABI-derived hard-float ABI
+   - ld-urchin-armeb.so.1 - for the EABI-derived soft-float ABI, EB
+   - ld-urchin-armebhf.so.1 - for the EABI-derived hard-float ABI, EB
+   urchin does not support the legacy OABI mode.
+   All the dynamic linkers live in /lib.
+   We default to soft-float, EL. */
+#undef  URCHIN_DYNAMIC_LINKER
+#if TARGET_BIG_ENDIAN_DEFAULT
+#define URCHIN_DYNAMIC_LINKER_E "%{mlittle-endian:;:eb}"
+#else
+#define URCHIN_DYNAMIC_LINKER_E "%{mbig-endian:eb}"
+#endif
+#define URCHIN_DYNAMIC_LINKER \
+  "/lib/ld-urchin-arm" URCHIN_DYNAMIC_LINKER_E "%{mfloat-abi=hard:hf}%{mfdpic:-fdpic}.so.1"
+
 /* At this point, bpabi.h will have clobbered LINK_SPEC.  We want to
    use the GNU/Linux version, not the generic BPABI version.  */
 #undef  LINK_SPEC
diff --git a/gcc/config/fuchsia.h b/gcc/config/fuchsia.h
index 16fc82188..0db23999d 100644
--- a/gcc/config/fuchsia.h
+++ b/gcc/config/fuchsia.h
@@ -55,6 +55,12 @@ along with GCC; see the file COPYING3.  If not see
 #undef  OPTION_MUSL_P
 #define OPTION_MUSL_P(opts) 1
 
+/* We are using Urchin as our libc.  */
+#undef  OPTION_URCHIN
+#define OPTION_URCHIN 1
+#undef  OPTION_URCHIN_P
+#define OPTION_URCHIN_P(opts) 1
+
 #ifndef TARGET_SUB_OS_CPP_BUILTINS
 #define TARGET_SUB_OS_CPP_BUILTINS()
 #endif
diff --git a/gcc/config/glibc-stdint.h b/gcc/config/glibc-stdint.h
index 5386288c1..b2575a342 100644
--- a/gcc/config/glibc-stdint.h
+++ b/gcc/config/glibc-stdint.h
@@ -22,7 +22,7 @@ a copy of the GCC Runtime Library Exception along with this program;
 see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
 <http://www.gnu.org/licenses/>.  */
 
-/* Systems using musl libc should use this header and make sure
+/* Systems using musl or urchin libc should use this header and make sure
    OPTION_MUSL is defined correctly before using the TYPE macros. */
 #ifndef OPTION_MUSL
 #define OPTION_MUSL 0
@@ -31,6 +31,13 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
 #define OPTION_MUSL_P(opts) 0
 #endif
 
+#ifndef OPTION_URCHIN
+#define OPTION_URCHIN 0
+#endif
+#ifndef OPTION_URCHIN_P
+#define OPTION_URCHIN_P(opts) 0
+#endif
+
 #define SIG_ATOMIC_TYPE "int"
 
 #define INT8_TYPE "signed char"
@@ -52,12 +59,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
 #define UINT_LEAST64_TYPE (LONG_TYPE_SIZE == 64 ? "long unsigned int" : "long long unsigned int")
 
 #define INT_FAST8_TYPE "signed char"
-#define INT_FAST16_TYPE (LONG_TYPE_SIZE == 64 && !OPTION_MUSL ? "long int" : "int")
-#define INT_FAST32_TYPE (LONG_TYPE_SIZE == 64 && !OPTION_MUSL ? "long int" : "int")
+#define INT_FAST16_TYPE (LONG_TYPE_SIZE == 64 && !OPTION_MUSL && !OPTION_URCHIN ? "long int" : "int")
+#define INT_FAST32_TYPE (LONG_TYPE_SIZE == 64 && !OPTION_MUSL && !OPTION_URCHIN ? "long int" : "int")
 #define INT_FAST64_TYPE (LONG_TYPE_SIZE == 64 ? "long int" : "long long int")
 #define UINT_FAST8_TYPE "unsigned char"
-#define UINT_FAST16_TYPE (LONG_TYPE_SIZE == 64 && !OPTION_MUSL ? "long unsigned int" : "unsigned int")
-#define UINT_FAST32_TYPE (LONG_TYPE_SIZE == 64 && !OPTION_MUSL ? "long unsigned int" : "unsigned int")
+#define UINT_FAST16_TYPE (LONG_TYPE_SIZE == 64 && !OPTION_MUSL && !OPTION_URCHIN ? "long unsigned int" : "unsigned int")
+#define UINT_FAST32_TYPE (LONG_TYPE_SIZE == 64 && !OPTION_MUSL && !OPTION_URCHIN ? "long unsigned int" : "unsigned int")
 #define UINT_FAST64_TYPE (LONG_TYPE_SIZE == 64 ? "long unsigned int" : "long long unsigned int")
 
 #define INTPTR_TYPE (LONG_TYPE_SIZE == 64 ? "long int" : "int")
diff --git a/gcc/config/i386/linux.h b/gcc/config/i386/linux.h
index 20a96d56e..2b7e8a191 100644
--- a/gcc/config/i386/linux.h
+++ b/gcc/config/i386/linux.h
@@ -24,3 +24,6 @@ along with GCC; see the file COPYING3.  If not see
 
 #undef MUSL_DYNAMIC_LINKER
 #define MUSL_DYNAMIC_LINKER "/lib/ld-musl-i386.so.1"
+
+#undef URCHIN_DYNAMIC_LINKER
+#define URCHIN_DYNAMIC_LINKER "/lib/ld-urchin-i386.so.1"
diff --git a/gcc/config/i386/linux64.h b/gcc/config/i386/linux64.h
index 3dd23eef5..c0e24d9a3 100644
--- a/gcc/config/i386/linux64.h
+++ b/gcc/config/i386/linux64.h
@@ -37,3 +37,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
 #define MUSL_DYNAMIC_LINKER64 "/lib/ld-musl-x86_64.so.1"
 #undef MUSL_DYNAMIC_LINKERX32
 #define MUSL_DYNAMIC_LINKERX32 "/lib/ld-musl-x32.so.1"
+
+#undef URCHIN_DYNAMIC_LINKER32
+#define URCHIN_DYNAMIC_LINKER32 "/lib/ld-urchin-i386.so.1"
+#undef URCHIN_DYNAMIC_LINKER64
+#define URCHIN_DYNAMIC_LINKER64 "/lib/ld-urchin-x86_64.so.1"
+#undef URCHIN_DYNAMIC_LINKERX32
+#define URCHIN_DYNAMIC_LINKERX32 "/lib/ld-urchin-x32.so.1"
diff --git a/gcc/config/linux-d.cc b/gcc/config/linux-d.cc
index 96040411a..41649598e 100644
--- a/gcc/config/linux-d.cc
+++ b/gcc/config/linux-d.cc
@@ -44,6 +44,8 @@ linux_d_os_builtins (void)
     d_add_builtin_version ("CRuntime_Bionic");
   else if (OPTION_MUSL)
     d_add_builtin_version ("CRuntime_Musl");
+  else if (OPTION_URCHIN)
+    d_add_builtin_version ("CRuntime_Urchin");
 }
 
 /* Handle a call to `__traits(getTargetInfo, "objectFormat")'.  */
diff --git a/gcc/config/linux-rust.cc b/gcc/config/linux-rust.cc
index 65add8a5c..fa9b5acac 100644
--- a/gcc/config/linux-rust.cc
+++ b/gcc/config/linux-rust.cc
@@ -45,6 +45,8 @@ linux_rust_target_os_info (void)
     rust_add_target_info ("target_env", "gnu");
   else if (OPTION_MUSL)
     rust_add_target_info ("target_env", "musl");
+  else if (OPTION_URCHIN)
+    rust_add_target_info ("target_env", "urchin");
   else if (OPTION_UCLIBC)
     rust_add_target_info ("target_env", "uclibc");
   else
diff --git a/gcc/config/linux.cc b/gcc/config/linux.cc
index e38361cde..976674fcf 100644
--- a/gcc/config/linux.cc
+++ b/gcc/config/linux.cc
@@ -30,7 +30,7 @@ bool
 linux_libc_has_function (enum function_class fn_class,
 			 tree type ATTRIBUTE_UNUSED)
 {
-  if (OPTION_GLIBC || OPTION_MUSL)
+  if (OPTION_GLIBC || OPTION_MUSL || OPTION_URCHIN)
     return true;
   if (OPTION_BIONIC)
     if (fn_class == function_c94
diff --git a/gcc/config/linux.h b/gcc/config/linux.h
index a7248ac90..a58741d0e 100644
--- a/gcc/config/linux.h
+++ b/gcc/config/linux.h
@@ -33,19 +33,25 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
 #define OPTION_UCLIBC_P(opts)	(DEFAULT_LIBC == LIBC_UCLIBC)
 #define OPTION_BIONIC_P(opts)	(DEFAULT_LIBC == LIBC_BIONIC)
 #undef OPTION_MUSL_P
+#undef OPTION_URCHIN_P
 #define OPTION_MUSL_P(opts)	(DEFAULT_LIBC == LIBC_MUSL)
+#define OPTION_URCHIN_P(opts)	(DEFAULT_LIBC == LIBC_URCHIN)
 #else
 #define OPTION_GLIBC_P(opts)	((opts)->x_linux_libc == LIBC_GLIBC)
 #define OPTION_UCLIBC_P(opts)	((opts)->x_linux_libc == LIBC_UCLIBC)
 #define OPTION_BIONIC_P(opts)	((opts)->x_linux_libc == LIBC_BIONIC)
 #undef OPTION_MUSL_P
+#undef OPTION_URCHINL_P
 #define OPTION_MUSL_P(opts)	((opts)->x_linux_libc == LIBC_MUSL)
+#define OPTION_URCHIN_P(opts)	((opts)->x_linux_libc == LIBC_URCHIN)
 #endif
 #define OPTION_GLIBC		OPTION_GLIBC_P (&global_options)
 #define OPTION_UCLIBC		OPTION_UCLIBC_P (&global_options)
 #define OPTION_BIONIC		OPTION_BIONIC_P (&global_options)
 #undef OPTION_MUSL
+#undef OPTION_URCHIN
 #define OPTION_MUSL		OPTION_MUSL_P (&global_options)
+#define OPTION_URCHIN		OPTION_URCHIN_P (&global_options)
 
 #define GNU_USER_TARGET_OS_CPP_BUILTINS()			\
     do {							\
@@ -59,25 +65,28 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
     } while (0)
 
 /* Determine which dynamic linker to use depending on whether GLIBC or
-   uClibc or Bionic or musl is the default C library and whether
+   uClibc or Bionic or musl or urchin is the default C library and whether
    -muclibc or -mglibc or -mbionic or -mmusl has been passed to change
    the default.  */
 
-#define CHOOSE_DYNAMIC_LINKER1(LIBC1, LIBC2, LIBC3, LIBC4, LD1, LD2, LD3, LD4)	\
-  "%{" LIBC2 ":" LD2 ";:%{" LIBC3 ":" LD3 ";:%{" LIBC4 ":" LD4 ";:" LD1 "}}}"
+#define CHOOSE_DYNAMIC_LINKER1(LIBC1, LIBC2, LIBC3, LIBC4, LIBC5, LD1, LD2, LD3, LD4, LD5)	\
+  "%{" LIBC2 ":" LD2 ";:%{" LIBC3 ":" LD3 ";:%{" LIBC4 ":" LD4 ";:%{" LIBC5 ":" LD5 ";:" LD1 "}}}}"
 
 #if DEFAULT_LIBC == LIBC_GLIBC
-#define CHOOSE_DYNAMIC_LINKER(G, U, B, M) \
-  CHOOSE_DYNAMIC_LINKER1 ("mglibc", "muclibc", "mbionic", "mmusl", G, U, B, M)
+#define CHOOSE_DYNAMIC_LINKER(G, U, B, M, UR) \
+  CHOOSE_DYNAMIC_LINKER1 ("mglibc", "muclibc", "mbionic", "mmusl", "murchin", G, U, B, M, UR)
 #elif DEFAULT_LIBC == LIBC_UCLIBC
-#define CHOOSE_DYNAMIC_LINKER(G, U, B, M) \
-  CHOOSE_DYNAMIC_LINKER1 ("muclibc", "mglibc", "mbionic", "mmusl", U, G, B, M)
+#define CHOOSE_DYNAMIC_LINKER(G, U, B, M, UR) \
+  CHOOSE_DYNAMIC_LINKER1 ("muclibc", "mglibc", "mbionic", "mmusl", "murchin", U, G, B, M, UR)
 #elif DEFAULT_LIBC == LIBC_BIONIC
-#define CHOOSE_DYNAMIC_LINKER(G, U, B, M) \
-  CHOOSE_DYNAMIC_LINKER1 ("mbionic", "mglibc", "muclibc", "mmusl", B, G, U, M)
+#define CHOOSE_DYNAMIC_LINKER(G, U, B, M, UR) \
+  CHOOSE_DYNAMIC_LINKER1 ("mbionic", "mglibc", "muclibc", "mmusl", "murchin", B, G, U, M, UR)
 #elif DEFAULT_LIBC == LIBC_MUSL
-#define CHOOSE_DYNAMIC_LINKER(G, U, B, M) \
-  CHOOSE_DYNAMIC_LINKER1 ("mmusl", "mglibc", "muclibc", "mbionic", M, G, U, B)
+#define CHOOSE_DYNAMIC_LINKER(G, U, B, M, UR) \
+  CHOOSE_DYNAMIC_LINKER1 ("mmusl", "mglibc", "muclibc", "mbionic", "murchin", M, G, U, B, UR)
+#elif DEFAULT_LIBC == LIBC_URCHIN
+#define CHOOSE_DYNAMIC_LINKER(UR, G, U, B, M) \
+  CHOOSE_DYNAMIC_LINKER1 ("murchin", "mglibc", "muclibc", "mbionic", "mmusl",  UR, G, U, B, M)
 #else
 #error "Unsupported DEFAULT_LIBC"
 #endif /* DEFAULT_LIBC */
@@ -100,18 +109,23 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
 #define MUSL_DYNAMIC_LINKER64 "/dev/null"
 #define MUSL_DYNAMIC_LINKERX32 "/dev/null"
 
+#define URCHIN_DYNAMIC_LINKER "/dev/null"
+#define URCHIN_DYNAMIC_LINKER32 "/dev/null"
+#define URCHIN_DYNAMIC_LINKER64 "/dev/null"
+#define URCHIN_DYNAMIC_LINKERX32 "/dev/null"
+
 #define GNU_USER_DYNAMIC_LINKER						\
   CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKER, UCLIBC_DYNAMIC_LINKER,	\
-			 BIONIC_DYNAMIC_LINKER, MUSL_DYNAMIC_LINKER)
+			 BIONIC_DYNAMIC_LINKER, MUSL_DYNAMIC_LINKER, URCHIN_DYNAMIC_LINKER)
 #define GNU_USER_DYNAMIC_LINKER32					\
   CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKER32, UCLIBC_DYNAMIC_LINKER32, \
-			 BIONIC_DYNAMIC_LINKER32, MUSL_DYNAMIC_LINKER32)
+			 BIONIC_DYNAMIC_LINKER32, MUSL_DYNAMIC_LINKER32, URCHIN_DYNAMIC_LINKER)
 #define GNU_USER_DYNAMIC_LINKER64					\
   CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKER64, UCLIBC_DYNAMIC_LINKER64, \
-			 BIONIC_DYNAMIC_LINKER64, MUSL_DYNAMIC_LINKER64)
+			 BIONIC_DYNAMIC_LINKER64, MUSL_DYNAMIC_LINKER64, URCHIN_DYNAMIC_LINKER)
 #define GNU_USER_DYNAMIC_LINKERX32					\
   CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKERX32, UCLIBC_DYNAMIC_LINKERX32, \
-			 BIONIC_DYNAMIC_LINKERX32, MUSL_DYNAMIC_LINKERX32)
+			 BIONIC_DYNAMIC_LINKERX32, MUSL_DYNAMIC_LINKERX32, URCHIN_DYNAMIC_LINKER)
 
 /* Whether we have Bionic libc runtime */
 #undef TARGET_HAS_BIONIC
@@ -189,6 +203,79 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
   }
 #endif
 
+/* urchin avoids problematic includes by rearranging the include directories.
+ * Unfortunately, this is mostly duplicated from cppdefault.cc */
+
+#if DEFAULT_LIBC == LIBC_URCHIN
+#define INCLUDE_DEFAULTS_URCHIN_GPP			\
+    { GPLUSPLUS_INCLUDE_DIR, "G++", 1, 1,		\
+      GPLUSPLUS_INCLUDE_DIR_ADD_SYSROOT, 0 },		\
+    { GPLUSPLUS_TOOL_INCLUDE_DIR, "G++", 1, 1,		\
+      GPLUSPLUS_INCLUDE_DIR_ADD_SYSROOT, 1 },		\
+    { GPLUSPLUS_BACKWARD_INCLUDE_DIR, "G++", 1, 1,	\
+      GPLUSPLUS_INCLUDE_DIR_ADD_SYSROOT, 0 },
+
+#ifdef LOCAL_INCLUDE_DIR
+#define INCLUDE_DEFAULTS_URCHIN_LOCAL			\
+    { LOCAL_INCLUDE_DIR, 0, 0, 1, 1, 2 },		\
+    { LOCAL_INCLUDE_DIR, 0, 0, 1, 1, 0 },
+#else
+#define INCLUDE_DEFAULTS_URCHIN_LOCAL
+#endif
+
+#ifdef PREFIX_INCLUDE_DIR
+#define INCLUDE_DEFAULTS_URCHIN_PREFIX			\
+    { PREFIX_INCLUDE_DIR, 0, 0, 1, 0, 0},
+#else
+#define INCLUDE_DEFAULTS_URCHIN_PREFIX
+#endif
+
+#ifdef CROSS_INCLUDE_DIR
+#define INCLUDE_DEFAULTS_URCHIN_CROSS			\
+    { CROSS_INCLUDE_DIR, "GCC", 0, 0, 0, 0},
+#else
+#define INCLUDE_DEFAULTS_URCHIN_CROSS
+#endif
+
+#ifdef TOOL_INCLUDE_DIR
+#define INCLUDE_DEFAULTS_URCHIN_TOOL			\
+    { TOOL_INCLUDE_DIR, "BINUTILS", 0, 1, 0, 0},
+#else
+#define INCLUDE_DEFAULTS_URCHIN_TOOL
+#endif
+
+#ifdef NATIVE_SYSTEM_HEADER_DIR
+#define INCLUDE_DEFAULTS_URCHIN_NATIVE			\
+    { NATIVE_SYSTEM_HEADER_DIR, 0, 0, 0, 1, 2 },	\
+    { NATIVE_SYSTEM_HEADER_DIR, 0, 0, 0, 1, 0 },
+#else
+#define INCLUDE_DEFAULTS_URCHIN_NATIVE
+#endif
+
+#if defined (CROSS_DIRECTORY_STRUCTURE) && !defined (TARGET_SYSTEM_ROOT)
+# undef INCLUDE_DEFAULTS_URCHIN_LOCAL
+# define INCLUDE_DEFAULTS_URCHIN_LOCAL
+# undef INCLUDE_DEFAULTS_URCHIN_NATIVE
+# define INCLUDE_DEFAULTS_URCHIN_NATIVE
+#else
+# undef INCLUDE_DEFAULTS_URCHIN_CROSS
+# define INCLUDE_DEFAULTS_URCHIN_CROSS
+#endif
+
+#undef INCLUDE_DEFAULTS
+#define INCLUDE_DEFAULTS				\
+  {							\
+    INCLUDE_DEFAULTS_URCHIN_GPP				\
+    INCLUDE_DEFAULTS_URCHIN_LOCAL				\
+    INCLUDE_DEFAULTS_URCHIN_PREFIX			\
+    INCLUDE_DEFAULTS_URCHIN_CROSS				\
+    INCLUDE_DEFAULTS_URCHIN_TOOL				\
+    INCLUDE_DEFAULTS_URCHIN_NATIVE			\
+    { GCC_INCLUDE_DIR, "GCC", 0, 1, 0, 0 },		\
+    { 0, 0, 0, 0, 0, 0 }				\
+  }
+#endif
+
 #if (DEFAULT_LIBC == LIBC_UCLIBC) && defined (SINGLE_LIBC) /* uClinux */
 /* This is a *uclinux* target.  We don't define below macros to normal linux
    versions, because doing so would require *uclinux* targets to include
diff --git a/gcc/config/linux.opt b/gcc/config/linux.opt
index 31f334e9b..b3621dcb8 100644
--- a/gcc/config/linux.opt
+++ b/gcc/config/linux.opt
@@ -32,5 +32,9 @@ Target RejectNegative Var(linux_libc,LIBC_UCLIBC) Negative(mmusl)
 Use uClibc C library.
 
 mmusl
-Target RejectNegative Var(linux_libc,LIBC_MUSL) Negative(mbionic)
+Target RejectNegative Var(linux_libc,LIBC_MUSL) Negative(murchin)
+Use musl C library.
+
+murchin
+Target RejectNegative Var(linux_libc,LIBC_URCHIN) Negative(mbionic)
 Use musl C library.
diff --git a/gcc/config/t-urchin b/gcc/config/t-urchin
new file mode 100644
index 000000000..ad3e95ab6
--- /dev/null
+++ b/gcc/config/t-urchin
@@ -0,0 +1,2 @@
+MULTIARCH_DIRNAME := $(subst -linux-gnu,-linux-urchin,$(MULTIARCH_DIRNAME))
+MULTILIB_OSDIRNAMES := $(subst -linux-gnu,-linux-urchin,$(MULTILIB_OSDIRNAMES))
diff --git a/gcc/configure b/gcc/configure
index abc8bfdc2..be50a5f95 100755
--- a/gcc/configure
+++ b/gcc/configure
@@ -33397,8 +33397,8 @@ else
     gcc_cv_libc_provides_ssp=no
   else
     case "$target" in
-       *-*-musl*)
-	 # All versions of musl provide stack protector
+       *-*-musl*| *-*-urchin*)
+	 # All versions of musl/urchin provide stack protector
 	 gcc_cv_libc_provides_ssp=yes;;
        *-*-linux* | *-*-kfreebsd*-gnu)
       # glibc 2.4 and later provides __stack_chk_fail and
@@ -33432,7 +33432,7 @@ fi
 	 # <http://gcc.gnu.org/ml/gcc/2008-10/msg00130.html>) and for now
 	 # simply assert that glibc does provide this, which is true for all
 	 # realistically usable GNU/Hurd configurations.
-	 # All supported versions of musl provide it as well
+	 # All supported versions of musl/urchin provide it as well
 	 gcc_cv_libc_provides_ssp=yes;;
        *-*-darwin* | *-*-freebsd* | *-*-netbsd*)
 	 ac_fn_cxx_check_func "$LINENO" "__stack_chk_fail" "ac_cv_func___stack_chk_fail"
@@ -33518,10 +33518,10 @@ if test "${with_long_double_128+set}" = set; then :
 else
 
       case "$target" in
-	s390*-*-linux-musl*)
+	s390*-*-linux-musl*|s390*-*-linux-urchin*)
 	  gcc_cv_target_ldbl128=yes
 	  ;;
-	powerpc*-*-linux-musl*)
+	powerpc*-*-linux-musl*|powerpc*-*-linux-urchin*)
 	  gcc_cv_target_ldbl128=no
 	  ;;
 	*)
@@ -33611,7 +33611,7 @@ fi
 # Check if the target LIBC handles PT_GNU_STACK.
 gcc_cv_libc_gnustack=unknown
 case "$target" in
-  mips*-*-linux-musl*)
+  mips*-*-linux-musl*|mips*-*-linux-urchin*)
     gcc_cv_libc_gnustack=yes
     ;;
   mips*-*-linux*)
@@ -33649,7 +33649,7 @@ case "$target" in
       gcc_cv_target_dl_iterate_phdr=no
     fi
     ;;
-  *-linux-musl*)
+  *-linux-musl*|*-linux-urchin*)
     gcc_cv_target_dl_iterate_phdr=yes
     ;;
 esac
diff --git a/gcc/configure.ac b/gcc/configure.ac
index 1d2cefa3f..1a3516897 100644
--- a/gcc/configure.ac
+++ b/gcc/configure.ac
@@ -6973,8 +6973,8 @@ AC_CACHE_CHECK(__stack_chk_fail in target C library,
     gcc_cv_libc_provides_ssp=no
   else
     case "$target" in
-       *-*-musl*)
-	 # All versions of musl provide stack protector
+       *-*-musl*|*-*-urchin*)
+	 # All versions of musl/urchin provide stack protector
 	 gcc_cv_libc_provides_ssp=yes;;
        *-*-linux* | *-*-kfreebsd*-gnu)
       # glibc 2.4 and later provides __stack_chk_fail and
@@ -7002,7 +7002,7 @@ AC_CACHE_CHECK(__stack_chk_fail in target C library,
 	 # <http://gcc.gnu.org/ml/gcc/2008-10/msg00130.html>) and for now
 	 # simply assert that glibc does provide this, which is true for all
 	 # realistically usable GNU/Hurd configurations.
-	 # All supported versions of musl provide it as well
+	 # All supported versions of musl/urchin provide it as well
 	 gcc_cv_libc_provides_ssp=yes;;
        *-*-darwin* | *-*-freebsd* | *-*-netbsd*)
 	 AC_CHECK_FUNC(__stack_chk_fail,[gcc_cv_libc_provides_ssp=yes],
@@ -7062,10 +7062,10 @@ case "$target" in
 		      [use 128-bit long double by default])],
       gcc_cv_target_ldbl128="$with_long_double_128", [
       case "$target" in
-	s390*-*-linux-musl*)
+	s390*-*-linux-musl*|s390*-*-linux-urchin*)
 	  gcc_cv_target_ldbl128=yes
 	  ;;
-	powerpc*-*-linux-musl*)
+	powerpc*-*-linux-musl*|powerpc*-*-linux-urchin*)
 	  gcc_cv_target_ldbl128=no
 	  ;;
 	*)]
@@ -7139,7 +7139,7 @@ fi
 # Check if the target LIBC handles PT_GNU_STACK.
 gcc_cv_libc_gnustack=unknown
 case "$target" in
-  mips*-*-linux-musl*)
+  mips*-*-linux-musl*|mips*-*-linux-urchin*)
     gcc_cv_libc_gnustack=yes
     ;;
   mips*-*-linux*)
@@ -7171,7 +7171,7 @@ case "$target" in
       gcc_cv_target_dl_iterate_phdr=no
     fi
     ;;
-  *-linux-musl*)
+  *-linux-musl*|*-linux-urchin*)
     gcc_cv_target_dl_iterate_phdr=yes
     ;;
 esac
diff --git a/gcc/d/dmd/cond.d b/gcc/d/dmd/cond.d
index e19466438..8f5d52bca 100644
--- a/gcc/d/dmd/cond.d
+++ b/gcc/d/dmd/cond.d
@@ -669,6 +669,7 @@ extern (C++) final class VersionCondition : DVCondition
             case "CRuntime_Glibc":
             case "CRuntime_Microsoft":
             case "CRuntime_Musl":
+            case "CRuntime_Urchin":
             case "CRuntime_Newlib":
             case "CRuntime_UClibc":
             case "CRuntime_WASI":
diff --git a/gcc/d/implement-d.texi b/gcc/d/implement-d.texi
index 770189caf..02f6a9fbb 100644
--- a/gcc/d/implement-d.texi
+++ b/gcc/d/implement-d.texi
@@ -1788,6 +1788,7 @@ These versions reflect the byte order of multi-byte data in memory.
 @itemx CRuntime_Glibc
 @itemx CRuntime_Microsoft
 @itemx CRuntime_Musl
+@itemx CRuntime_Urchin
 @itemx CRuntime_Newlib
 @itemx CRuntime_UClibc
 
@@ -1796,6 +1797,7 @@ These versions reflect which standard C library is being linked in.
 @code{CRuntime_Glibc} is set when GLIBC is the default C library.
 @code{CRuntime_Microsoft} is set when MSVCRT is the default C library.
 @code{CRuntime_Musl} is set when musl is the default C library.
+@code{CRuntime_Urchin} is set when urchin is the default C library.
 @code{CRuntime_Newlib} is set when Newlib is the default C library.
 @code{CRuntime_UClibc} is set when uClibc is the default C library.
 
diff --git a/gcc/doc/install.texi b/gcc/doc/install.texi
index 89e2c642f..1f4a30f66 100644
--- a/gcc/doc/install.texi
+++ b/gcc/doc/install.texi
@@ -843,7 +843,7 @@ aix@var{version}, amdhsa, aout, cygwin, darwin@var{version},
 eabi, eabialtivec, eabisim, eabisimaltivec, elf, elf32,
 elfbare, elfoabi, freebsd@var{version}, gnu, hpux, hpux@var{version},
 kfreebsd-gnu, kopensolaris-gnu, linux-androideabi, linux-gnu,
-linux-gnu_altivec, linux-musl, linux-uclibc, lynxos, mingw32, mingw32crt,
+linux-gnu_altivec, linux-musl, linux-urchin, linux-uclibc, lynxos, mingw32, mingw32crt,
 mmixware, msdosdjgpp, netbsd, netbsdelf@var{version}, nto-qnx, openbsd,
 rtems, solaris@var{version}, symbianelf, tpf, uclinux, uclinux_eabi, vms,
 vxworks, vxworksae, vxworksmils
diff --git a/gcc/doc/invoke.texi b/gcc/doc/invoke.texi
index b14ad30cd..7f9646a7a 100644
--- a/gcc/doc/invoke.texi
+++ b/gcc/doc/invoke.texi
@@ -999,7 +999,7 @@ Objective-C and Objective-C++ Dialects}.
 -mcpu=@var{cpu}}
 
 @emph{GNU/Linux Options}
-@gccoptlist{-mglibc  -muclibc  -mmusl  -mbionic  -mandroid
+@gccoptlist{-mglibc  -muclibc  -mmusl  -murchin  -mbionic  -mandroid
 -tno-android-cc  -tno-android-ld}
 
 @emph{H8/300 Options}
@@ -26166,7 +26166,7 @@ These @samp{-m} options are defined for GNU/Linux targets:
 @opindex mglibc
 @item -mglibc
 Use the GNU C library.  This is the default except
-on @samp{*-*-linux-*uclibc*}, @samp{*-*-linux-*musl*} and
+on @samp{*-*-linux-*uclibc*}, @samp{*-*-linux-*musl*}, @samp{*-*-linux-*urchin*}  and
 @samp{*-*-linux-*android*} targets.
 
 @opindex muclibc
@@ -26179,6 +26179,11 @@ Use uClibc C library.  This is the default on
 Use the musl C library.  This is the default on
 @samp{*-*-linux-*musl*} targets.
 
+@opindex murchin
+@item -murchin
+Use the urchin C library.  This is the default on
+@samp{*-*-linux-*urchin*} targets.
+
 @opindex mbionic
 @item -mbionic
 Use Bionic C library.  This is the default on
diff --git a/gcc/ginclude/stddef.h b/gcc/ginclude/stddef.h
index 349213108..f2fb9b9df 100644
--- a/gcc/ginclude/stddef.h
+++ b/gcc/ginclude/stddef.h
@@ -128,7 +128,7 @@ _TYPE_wchar_t;
 #ifndef ___int_ptrdiff_t_h
 #ifndef _GCC_PTRDIFF_T
 #ifndef _PTRDIFF_T_DECLARED /* DragonFly */
-#ifndef __DEFINED_ptrdiff_t /* musl libc */
+#ifndef __DEFINED_ptrdiff_t /* musl/urchin libc */
 #define _PTRDIFF_T
 #define _T_PTRDIFF_
 #define _T_PTRDIFF
@@ -177,7 +177,7 @@ typedef __PTRDIFF_TYPE__ ptrdiff_t;
 #ifndef _SIZE_T_DEFINED
 #ifndef _BSD_SIZE_T_DEFINED_	/* Darwin */
 #ifndef _SIZE_T_DECLARED	/* FreeBSD 5 */
-#ifndef __DEFINED_size_t	/* musl libc */
+#ifndef __DEFINED_size_t	/* musl/urchin libc */
 #ifndef ___int_size_t_h
 #ifndef _GCC_SIZE_T
 #ifndef _SIZET_
@@ -195,7 +195,7 @@ typedef __PTRDIFF_TYPE__ ptrdiff_t;
 #define _SIZE_T_DEFINED
 #define _BSD_SIZE_T_DEFINED_	/* Darwin */
 #define _SIZE_T_DECLARED	/* FreeBSD 5 */
-#define __DEFINED_size_t	/* musl libc */
+#define __DEFINED_size_t	/* musl/urchin libc */
 #define ___int_size_t_h
 #define _GCC_SIZE_T
 #define _SIZET_
@@ -257,7 +257,7 @@ typedef long ssize_t;
 #ifndef _BSD_WCHAR_T_DEFINED_    /* Darwin */
 #ifndef _BSD_RUNE_T_DEFINED_	/* Darwin */
 #ifndef _WCHAR_T_DECLARED /* FreeBSD 5 */
-#ifndef __DEFINED_wchar_t /* musl libc */
+#ifndef __DEFINED_wchar_t /* musl/urchin libc */
 #ifndef _WCHAR_T_DEFINED_
 #ifndef _WCHAR_T_DEFINED
 #ifndef _WCHAR_T_H
diff --git a/gcc/testsuite/gdc.test/fail_compilation/reserved_version.d b/gcc/testsuite/gdc.test/fail_compilation/reserved_version.d
index ac00b4d3b..48aba3fd3 100644
--- a/gcc/testsuite/gdc.test/fail_compilation/reserved_version.d
+++ b/gcc/testsuite/gdc.test/fail_compilation/reserved_version.d
@@ -89,6 +89,7 @@ fail_compilation/reserved_version.d(188): Error: version identifier `CRuntime_Di
 fail_compilation/reserved_version.d(189): Error: version identifier `CRuntime_Glibc` is reserved and cannot be set
 fail_compilation/reserved_version.d(190): Error: version identifier `CRuntime_Microsoft` is reserved and cannot be set
 fail_compilation/reserved_version.d(191): Error: version identifier `CRuntime_Musl` is reserved and cannot be set
+fail_compilation/reserved_version.d(191): Error: version identifier `CRuntime_Urchin` is reserved and cannot be set
 fail_compilation/reserved_version.d(192): Error: version identifier `CRuntime_Newlib` is reserved and cannot be set
 fail_compilation/reserved_version.d(193): Error: version identifier `CRuntime_UClibc` is reserved and cannot be set
 fail_compilation/reserved_version.d(194): Error: version identifier `CRuntime_WASI` is reserved and cannot be set
@@ -216,6 +217,7 @@ version = CRuntime_DigitalMars;
 version = CRuntime_Glibc;
 version = CRuntime_Microsoft;
 version = CRuntime_Musl;
+version = CRuntime_Urchin;
 version = CRuntime_Newlib;
 version = CRuntime_UClibc;
 version = CRuntime_WASI;
@@ -336,6 +338,7 @@ debug = CRuntime_DigitalMars;
 debug = CRuntime_Glibc;
 debug = CRuntime_Microsoft;
 debug = CRuntime_Musl;
+debug = CRuntime_Urchin;
 debug = CRuntime_Newlib;
 debug = CRuntime_UClibc;
 debug = CRuntime_WASI;
diff --git a/gcc/testsuite/gdc.test/fail_compilation/reserved_version_switch.d b/gcc/testsuite/gdc.test/fail_compilation/reserved_version_switch.d
index 44db40410..74b7463f4 100644
--- a/gcc/testsuite/gdc.test/fail_compilation/reserved_version_switch.d
+++ b/gcc/testsuite/gdc.test/fail_compilation/reserved_version_switch.d
@@ -83,6 +83,7 @@
 // REQUIRED_ARGS: -version=CRuntime_Glibc
 // REQUIRED_ARGS: -version=CRuntime_Microsoft
 // REQUIRED_ARGS: -version=CRuntime_Musl
+// REQUIRED_ARGS: -version=CRuntime_Urchin
 // REQUIRED_ARGS: -version=CRuntime_Newlib
 // REQUIRED_ARGS: -version=CRuntime_UClibc
 // REQUIRED_ARGS: -version=CRuntime_WASI
@@ -192,6 +193,7 @@
 // REQUIRED_ARGS: -debug=CRuntime_Glibc
 // REQUIRED_ARGS: -debug=CRuntime_Microsoft
 // REQUIRED_ARGS: -debug=CRuntime_Musl
+// REQUIRED_ARGS: -debug=CRuntime_Urchin
 // REQUIRED_ARGS: -debug=CRuntime_Newlib
 // REQUIRED_ARGS: -debug=CRuntime_UClibc
 // REQUIRED_ARGS: -debug=CRuntime_WASI
@@ -307,6 +309,7 @@ Error: version identifier `CRuntime_DigitalMars` is reserved and cannot be set
 Error: version identifier `CRuntime_Glibc` is reserved and cannot be set
 Error: version identifier `CRuntime_Microsoft` is reserved and cannot be set
 Error: version identifier `CRuntime_Musl` is reserved and cannot be set
+Error: version identifier `CRuntime_Urchin` is reserved and cannot be set
 Error: version identifier `CRuntime_Newlib` is reserved and cannot be set
 Error: version identifier `CRuntime_UClibc` is reserved and cannot be set
 Error: version identifier `CRuntime_WASI` is reserved and cannot be set
diff --git a/libgcc/config.host b/libgcc/config.host
index 733290370..54f446dba 100644
--- a/libgcc/config.host
+++ b/libgcc/config.host
@@ -1581,7 +1581,7 @@ esac
 case ${host} in
 i[34567]86-*-* | x86_64-*-*)
 	case ${host} in
-	*-musl*)
+	*-musl*|*-urchin*)
 		tmake_file="${tmake_file} i386/t-cpuinfo-static"
 		;;
 	*)
@@ -1674,7 +1674,7 @@ vxworks)
 esac
 
 case ${host} in
-*-*-musl*)
+*-*-musl*|*-*-urchin*)
   # The gthr weak references are unsafe with static linking
   tmake_file="$tmake_file t-gthr-noweak"
   ;;
diff --git a/libgfortran/acinclude.m4 b/libgfortran/acinclude.m4
index a73207e54..cd87089ea 100644
--- a/libgfortran/acinclude.m4
+++ b/libgfortran/acinclude.m4
@@ -88,7 +88,7 @@ void foo (void);
 	      [Define to 1 if the target supports #pragma weak])
   fi
   case "$host" in
-    *-*-darwin* | *-*-hpux* | *-*-cygwin* | *-*-mingw* | *-*-musl* )
+    *-*-darwin* | *-*-hpux* | *-*-cygwin* | *-*-mingw* | *-*-musl* | *-*-urchin* )
       AC_DEFINE(GTHREAD_USE_WEAK, 0,
 		[Define to 0 if the target shouldn't use #pragma weak])
       ;;
diff --git a/libgfortran/configure b/libgfortran/configure
index 774dd52fc..67fb3cdfd 100755
--- a/libgfortran/configure
+++ b/libgfortran/configure
@@ -31053,7 +31053,7 @@ $as_echo "#define SUPPORTS_WEAK 1" >>confdefs.h
 
   fi
   case "$host" in
-    *-*-darwin* | *-*-hpux* | *-*-cygwin* | *-*-mingw* | *-*-musl* )
+    *-*-darwin* | *-*-hpux* | *-*-cygwin* | *-*-mingw* | *-*-musl* | *-*-urchin* )
 
 $as_echo "#define GTHREAD_USE_WEAK 0" >>confdefs.h
 
diff --git a/libgm2/configure.host b/libgm2/configure.host
index 2806fd687..f01b1dc05 100644
--- a/libgm2/configure.host
+++ b/libgm2/configure.host
@@ -255,7 +255,7 @@ case "${host_os}" in
   freebsd*)
     os_include_dir="os/bsd/freebsd"
     ;;
-  linux-musl*)
+  linux-musl*|linux-urchin*)
     os_include_dir="os/generic"
     ;;
   gnu* | linux* | kfreebsd*-gnu | uclinux*)
diff --git a/libgo/go/cmd/go/internal/bug/bug.go b/libgo/go/cmd/go/internal/bug/bug.go
index 702dc2a14..eb69b9592 100644
--- a/libgo/go/cmd/go/internal/bug/bug.go
+++ b/libgo/go/cmd/go/internal/bug/bug.go
@@ -213,8 +213,8 @@ func printGlibcVersion(w io.Writer) {
 	}
 	fmt.Fprintf(w, "%s: %s\n", m[1], firstLine(out))
 
-	// print another line (the one containing version string) in case of musl libc
-	if idx := bytes.IndexByte(out, '\n'); bytes.Index(out, []byte("musl")) != -1 && idx > -1 {
+	// print another line (the one containing version string) in case of musl/urchin libc
+	if idx := bytes.IndexByte(out, '\n'); bytes.Index(out, []byte("musl")) != -1 || bytes.Index(out, []byte("urchin")) != -1 && idx > -1 {
 		fmt.Fprintf(w, "%s\n", firstLine(out[idx+1:]))
 	}
 }
diff --git a/libgo/go/runtime/signal_gccgo.go b/libgo/go/runtime/signal_gccgo.go
index 82e6996ab..1daa010fb 100644
--- a/libgo/go/runtime/signal_gccgo.go
+++ b/libgo/go/runtime/signal_gccgo.go
@@ -106,7 +106,7 @@ func getsig(i uint32) uintptr {
 	if sigaction(i, nil, &sa) < 0 {
 		// On GNU/Linux glibc rejects attempts to call
 		// sigaction with signal 32 (SIGCANCEL) or 33 (SIGSETXID).
-		// On musl signal 34 (SIGSYNCCALL) also needs to be treated accordingly.
+		// On musl and urchin signal 34 (SIGSYNCCALL) also needs to be treated accordingly.
 		if GOOS == "linux" && (i == 32 || i == 33 || i == 34) {
 			return _SIG_DFL
 		}
diff --git a/libitm/configure.tgt b/libitm/configure.tgt
index a8276f05d..e8c0e3fc7 100644
--- a/libitm/configure.tgt
+++ b/libitm/configure.tgt
@@ -31,7 +31,7 @@
 if test "$gcc_cv_have_tls" = yes ; then
   case "${target}" in
 
-    *-*-musl*)
+    *-*-musl*|*-*-urchin*)
 	;;
 
     # For x86, we use slots in the TCB head for most of our TLS.
diff --git a/libphobos/libdruntime/core/stdc/assert_.d b/libphobos/libdruntime/core/stdc/assert_.d
index c6d9d9f6c..2e477f91c 100644
--- a/libphobos/libdruntime/core/stdc/assert_.d
+++ b/libphobos/libdruntime/core/stdc/assert_.d
@@ -113,6 +113,13 @@ else version (CRuntime_Musl)
      */
     noreturn __assert_fail(const(char)* exp, const(char)* file, uint line, const(char)* func);
 }
+else version (CRuntime_Urchin)
+{
+     /***
+     * Assert failure function in the Urchin C library.
+     */
+    noreturn __assert_fail(const(char)* exp, const(char)* file, uint line, const(char)* func);
+}
 else version (CRuntime_Newlib)
 {
     /***
diff --git a/libphobos/libdruntime/core/stdc/config.d b/libphobos/libdruntime/core/stdc/config.d
index ca833eaac..60a081de3 100644
--- a/libphobos/libdruntime/core/stdc/config.d
+++ b/libphobos/libdruntime/core/stdc/config.d
@@ -663,8 +663,19 @@ version (CRuntime_Musl)
         enum muslRedirTime64 = (c_long.sizeof == 4);
     }
 }
+else version (CRuntime_Urchin)
+{
+    version (CRuntime_Urchin_Pre_Time64)
+        enum urchinRedirTime64 = false;
+    else
+    {
+        // time_t was defined as a C long in older Musl versions.
+        enum urchinRedirTime64 = (c_long.sizeof == 4);
+    }
+}
 else
     enum muslRedirTime64 = false;
+    enum urchinRedirTime64 = false;
 
 package(core) template muslRedirTime64Mangle(string name, string redirectedName)
 {
@@ -673,3 +684,11 @@ package(core) template muslRedirTime64Mangle(string name, string redirectedName)
     else
         enum muslRedirTime64Mangle = name;
 }
+
+package(core) template urchinRedirTime64Mangle(string name, string redirectedName)
+{
+    static if (urchinRedirTime64)
+        enum urchinRedirTime64Mangle = redirectedName;
+    else
+        enum urchinRedirTime64Mangle = name;
+}
diff --git a/libphobos/libdruntime/core/stdc/errno.d b/libphobos/libdruntime/core/stdc/errno.d
index ddec70f7a..3f54ac041 100644
--- a/libphobos/libdruntime/core/stdc/errno.d
+++ b/libphobos/libdruntime/core/stdc/errno.d
@@ -75,6 +75,14 @@ else version (CRuntime_Musl)
         alias errno = __errno_location;
     }
 }
+else version (CRuntime_Urchin)
+{
+    extern (C)
+    {
+        ref int __errno_location();
+        alias errno = __errno_location;
+    }
+}
 else version (CRuntime_Newlib)
 {
     extern (C)
diff --git a/libphobos/libdruntime/core/stdc/fenv.d b/libphobos/libdruntime/core/stdc/fenv.d
index a7364c0a2..cc760b9a2 100644
--- a/libphobos/libdruntime/core/stdc/fenv.d
+++ b/libphobos/libdruntime/core/stdc/fenv.d
@@ -448,6 +448,71 @@ else version (CRuntime_Musl)
         static assert(false, "Architecture not supported.");
     }
 }
+else version (CRuntime_Urchin)
+{
+    version (AArch64)
+    {
+        struct fenv_t
+        {
+            uint __fpcr;
+            uint __fpsr;
+        }
+        alias uint fexcept_t;
+    }
+    else version (ARM)
+    {
+        import core.stdc.config : c_ulong;
+
+        struct fenv_t
+        {
+            c_ulong __cw;
+        }
+        alias c_ulong fexcept_t;
+    }
+    else version (IBMZ_Any)
+    {
+        alias uint fenv_t;
+        alias uint fexcept_t;
+    }
+    else version (MIPS_Any)
+    {
+        struct fenv_t
+        {
+            uint __cw;
+        }
+        alias ushort fexcept_t;
+    }
+    else version (PPC_Any)
+    {
+        alias double fenv_t;
+        alias uint fexcept_t;
+    }
+    else version (X86_Any)
+    {
+        struct fenv_t
+        {
+            ushort __control_word;
+            ushort __unused1;
+            ushort __status_word;
+            ushort __unused2;
+            ushort __tags;
+            ushort __unused3;
+            uint   __eip;
+            ushort __cs_selector;
+            ushort __opcode;
+            uint   __data_offset;
+            ushort __data_selector;
+            ushort __unused5;
+            version (X86_64)
+                uint __mxcsr;
+        }
+        alias ushort fexcept_t;
+    }
+    else
+    {
+        static assert(false, "Architecture not supported.");
+    }
+}
 else version (CRuntime_Newlib)
 {
     version (AArch64)
@@ -931,6 +996,11 @@ else version (CRuntime_Musl)
     ///
     enum FE_DFL_ENV = cast(fenv_t*)(-1);
 }
+else version (CRuntime_Urchin)
+{
+    ///
+    enum FE_DFL_ENV = cast(fenv_t*)(-1);
+}
 else version (CRuntime_UClibc)
 {
     ///
diff --git a/libphobos/libdruntime/core/stdc/locale.d b/libphobos/libdruntime/core/stdc/locale.d
index 357d75e95..26936a53e 100644
--- a/libphobos/libdruntime/core/stdc/locale.d
+++ b/libphobos/libdruntime/core/stdc/locale.d
@@ -252,6 +252,23 @@ else version (CRuntime_Musl)
     ///
     enum LC_ALL            = 6;
 }
+else version (CRuntime_Urchin)
+{
+    ///
+    enum LC_CTYPE          = 0;
+    ///
+    enum LC_NUMERIC        = 1;
+    ///
+    enum LC_TIME           = 2;
+    ///
+    enum LC_COLLATE        = 3;
+    ///
+    enum LC_MONETARY       = 4;
+    ///
+    enum LC_MESSAGES       = 5;
+    ///
+    enum LC_ALL            = 6;
+}
 else version (CRuntime_Newlib)
 {
     ///
diff --git a/libphobos/libdruntime/core/stdc/math.d b/libphobos/libdruntime/core/stdc/math.d
index c5eaf79a8..4b7696a09 100644
--- a/libphobos/libdruntime/core/stdc/math.d
+++ b/libphobos/libdruntime/core/stdc/math.d
@@ -831,6 +831,130 @@ else version (CRuntime_Musl)
     pragma(mangle, real.sizeof == double.sizeof ? "__signbit" : "__signbitl")
     pure int signbit(real x);
 }
+else version (CRuntime_Urchin)
+{
+    enum
+    {
+        ///
+        FP_NAN,
+        ///
+        FP_INFINITE,
+        ///
+        FP_ZERO,
+        ///
+        FP_SUBNORMAL,
+        ///
+        FP_NORMAL,
+    }
+
+    enum
+    {
+        ///
+        FP_FAST_FMA  = 0,
+        ///
+        FP_FAST_FMAF = 0,
+        ///
+        FP_FAST_FMAL = 0,
+    }
+
+  pure {
+    int __fpclassifyf(float x);
+    int __fpclassify(double x);
+    int __fpclassifyl(real x);
+
+    int __signbitf(float x);
+    int __signbit(double x);
+    int __signbitl(real x);
+  }
+
+    //int fpclassify(real-floating x);
+      ///
+    pragma(mangle, "__fpclassifyf") pure int fpclassify(float x);
+    ///
+    pragma(mangle, "__fpclassify")  pure int fpclassify(double x);
+    ///
+    pragma(mangle, real.sizeof == double.sizeof ? "__fpclassify" : "__fpclassifyl")
+    pure int fpclassify(real x);
+  extern (D) pure
+  {
+    private uint __FLOAT_BITS(float __f)
+    {
+        union __u_t {
+            float __f;
+            uint __i;
+        }
+        __u_t __u;
+        __u.__f = __f;
+        return __u.__i;
+    }
+    private ulong __DOUBLE_BITS(double __f)
+    {
+        union __u_t {
+            double __f;
+            ulong __i;
+        }
+        __u_t __u;
+        __u.__f = __f;
+        return __u.__i;
+    }
+
+    //int isfinite(real-floating x);
+    ///
+    int isfinite(float x)       { return (__FLOAT_BITS(x) & 0x7fffffff) < 0x7f800000; }
+    ///
+    int isfinite(double x)      { return (__DOUBLE_BITS(x) & -1UL>>1) < 0x7ffUL<<52;  }
+    ///
+    int isfinite(real x)
+    {
+        return (real.sizeof == double.sizeof)
+            ? isfinite(cast(double)x)
+            : __fpclassifyl(x) > FP_INFINITE;
+    }
+
+    //int isinf(real-floating x);
+    ///
+    int isinf(float x)          { return (__FLOAT_BITS(x) & 0x7fffffff) == 0x7f800000;  }
+    ///
+    int isinf(double x)         { return (__DOUBLE_BITS(x) & -1UL>>1) == 0x7ffUL<<52;   }
+    ///
+    int isinf(real x)
+    {
+        return (real.sizeof == double.sizeof)
+            ? isinf(cast(double)x)
+            : __fpclassifyl(x) == FP_INFINITE;
+    }
+
+    //int isnan(real-floating x);
+    ///
+    int isnan(float x)          { return (__FLOAT_BITS(x) & 0x7fffffff) > 0x7f800000;  }
+    ///
+    int isnan(double x)         { return (__DOUBLE_BITS(x) & -1UL>>1) > 0x7ffUL<<52;   }
+    ///
+    int isnan(real x)
+    {
+        return (real.sizeof == double.sizeof)
+            ? isnan(cast(double)x)
+            : __fpclassifyl(x) == FP_NAN;
+    }
+
+    //int isnormal(real-floating x);
+    ///
+    int isnormal(float x)       { return fpclassify(x) == FP_NORMAL; }
+    ///
+    int isnormal(double x)      { return fpclassify(x) == FP_NORMAL; }
+    ///
+    int isnormal(real x)        { return fpclassify(x) == FP_NORMAL; }
+  }
+
+    //int signbit(real-floating x);
+    ///
+    pragma(mangle, "__signbitf") pure int signbit(float x);
+    ///
+    pragma(mangle, "__signbit")  pure int signbit(double x);
+    ///
+    pragma(mangle, real.sizeof == double.sizeof ? "__signbit" : "__signbitl")
+    pure int signbit(real x);
+}
 else version (CRuntime_UClibc)
 {
     enum
diff --git a/libphobos/libdruntime/core/stdc/stdint.d b/libphobos/libdruntime/core/stdc/stdint.d
index 476c42f08..7d8febc99 100644
--- a/libphobos/libdruntime/core/stdc/stdint.d
+++ b/libphobos/libdruntime/core/stdc/stdint.d
@@ -156,6 +156,15 @@ else version (linux)
         alias int_fast32_t  = int;   ///
         alias uint_fast32_t = uint;  ///
     }
+    else version (CRuntime_Urchin)
+    {
+        alias int_fast8_t   = byte;  ///
+        alias uint_fast8_t  = ubyte; ///
+        alias int_fast16_t  = int;   ///
+        alias uint_fast16_t = uint;  ///
+        alias int_fast32_t  = int;   ///
+        alias uint_fast32_t = uint;  ///
+    }
     else
     {
         alias int_fast8_t   = byte;      ///
diff --git a/libphobos/libdruntime/core/stdc/stdio.d b/libphobos/libdruntime/core/stdc/stdio.d
index 1fc046163..145d8191d 100644
--- a/libphobos/libdruntime/core/stdc/stdio.d
+++ b/libphobos/libdruntime/core/stdc/stdio.d
@@ -142,6 +142,24 @@ else version (CRuntime_Musl)
         L_tmpnam     = 20
     }
 }
+else version (CRuntime_Urchin)
+{
+    enum
+    {
+        ///
+        BUFSIZ       = 1024,
+        ///
+        EOF          = -1,
+        ///
+        FOPEN_MAX    = 1000,
+        ///
+        FILENAME_MAX = 4096,
+        ///
+        TMP_MAX      = 10000,
+        ///
+        L_tmpnam     = 20
+    }
+}
 else version (Darwin)
 {
     enum
@@ -518,6 +536,20 @@ else version (CRuntime_Musl)
     ///
     alias shared(_IO_FILE) FILE;
 }
+else version (CRuntime_Urchin)
+{
+    union fpos_t
+    {
+        char[16] __opaque = 0;
+        double __align;
+    }
+    struct _IO_FILE;
+
+    ///
+    alias _IO_FILE _iobuf; // needed for phobos
+    ///
+    alias shared(_IO_FILE) FILE;
+}
 else version (Darwin)
 {
     ///
@@ -1212,6 +1244,24 @@ else version (CRuntime_Musl)
         _IONBF = 2,
     }
 }
+else version (CRuntime_Urchin)
+{
+    // needs tail const
+    extern shared FILE* stdin;
+    ///
+    extern shared FILE* stdout;
+    ///
+    extern shared FILE* stderr;
+    enum
+    {
+        ///
+        _IOFBF = 0,
+        ///
+        _IOLBF = 1,
+        ///
+        _IONBF = 2,
+    }
+}
 else version (CRuntime_Newlib)
 {
     enum
@@ -1978,6 +2028,29 @@ else version (CRuntime_Musl)
     pragma(printf)
     int vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);
 }
+else version (CRuntime_Urchin)
+{
+    @trusted
+    {
+        ///
+        void rewind(FILE* stream);
+        ///
+        pure void clearerr(FILE* stream);
+        ///
+        pure int  feof(FILE* stream);
+        ///
+        pure int  ferror(FILE* stream);
+        ///
+        int  fileno(FILE *);
+    }
+
+    ///
+    pragma(printf)
+    int snprintf(scope char* s, size_t n, scope const char* format, scope const ...);
+    ///
+    pragma(printf)
+    int vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);
+}
 else version (CRuntime_Newlib)
 {
   // No unsafe pointer manipulation.
diff --git a/libphobos/libdruntime/core/stdc/stdlib.d b/libphobos/libdruntime/core/stdc/stdlib.d
index bd5fc2b15..fccbaa07d 100644
--- a/libphobos/libdruntime/core/stdc/stdlib.d
+++ b/libphobos/libdruntime/core/stdc/stdlib.d
@@ -99,6 +99,7 @@ else version (DragonFlyBSD) enum RAND_MAX = 0x7fffffff;
 else version (Solaris) enum RAND_MAX = 0x7fff;
 else version (CRuntime_Bionic) enum RAND_MAX = 0x7fffffff;
 else version (CRuntime_Musl) enum RAND_MAX = 0x7fffffff;
+else version (CRuntime_Urchin) enum RAND_MAX = 0x7fffffff;
 else version (CRuntime_Newlib) enum RAND_MAX = 0x7fffffff;
 else version (CRuntime_UClibc) enum RAND_MAX = 0x7fffffff;
 else version (WASI) enum RAND_MAX = 0x7fffffff;
diff --git a/libphobos/libdruntime/core/stdc/time.d b/libphobos/libdruntime/core/stdc/time.d
index d7a57655f..a6a14807c 100644
--- a/libphobos/libdruntime/core/stdc/time.d
+++ b/libphobos/libdruntime/core/stdc/time.d
@@ -31,24 +31,30 @@ nothrow:
 
 ///
 pragma(mangle, muslRedirTime64Mangle!("difftime", "__difftime64"))
+pragma(mangle, urchinRedirTime64Mangle!("difftime", "__difftime64"))
 pure double  difftime(time_t time1, time_t time0); // MT-Safe
 ///
 pragma(mangle, muslRedirTime64Mangle!("mktime", "__mktime64"))
+pragma(mangle, urchinRedirTime64Mangle!("mktime", "__mktime64"))
 @system time_t  mktime(scope tm* timeptr); // @system: MT-Safe env locale
 ///
 pragma(mangle, muslRedirTime64Mangle!("time", "__time64"))
+pragma(mangle, urchinRedirTime64Mangle!("time", "__time64"))
 time_t  time(scope time_t* timer);
 
 ///
 @system char*   asctime(const scope tm* timeptr); // @system: MT-Unsafe race:asctime locale
 ///
 pragma(mangle, muslRedirTime64Mangle!("ctime", "__ctime64"))
+pragma(mangle, urchinRedirTime64Mangle!("ctime", "__ctime64"))
 @system char*   ctime(const scope time_t* timer); // @system: MT-Unsafe race:tmbuf race:asctime env locale
 ///
 pragma(mangle, muslRedirTime64Mangle!("gmtime", "__gmtime64"))
+pragma(mangle, urchinRedirTime64Mangle!("gmtime", "__gmtime64"))
 @system tm*     gmtime(const scope time_t* timer); // @system: MT-Unsafe race:tmbuf env locale
 ///
 pragma(mangle, muslRedirTime64Mangle!("localtime", "__localtime64"))
+pragma(mangle, urchinRedirTime64Mangle!("localtime", "__localtime64"))
 @system tm*     localtime(const scope time_t* timer); // @system: MT-Unsafe race:tmbuf env locale
 ///
 @system size_t  strftime(scope char* s, size_t maxsize, const scope char* format, const scope tm* timeptr); // @system: MT-Safe env locale
diff --git a/libphobos/libdruntime/core/sync/mutex.d b/libphobos/libdruntime/core/sync/mutex.d
index e7380c467..b6406603a 100644
--- a/libphobos/libdruntime/core/sync/mutex.d
+++ b/libphobos/libdruntime/core/sync/mutex.d
@@ -371,10 +371,11 @@ unittest
     // Verify that the underlying implementation has been destroyed by checking
     // that locking is not possible. This assumes that the underlying
     // implementation is well behaved and makes the object non-lockable upon
-    // destruction. The Bionic, DragonFly, Musl, and Solaris C runtimes don't
+    // destruction. The Bionic, DragonFly, Musl, Urchin, and Solaris C runtimes don't
     // appear to do so, so skip this test.
     version (CRuntime_Bionic) {} else
     version (CRuntime_Musl) {} else
+    version (CRuntime_Urchin) {} else
     version (DragonFlyBSD) {} else
     version (Solaris) {} else
     assert(!mtx.tryLock_nothrow());
diff --git a/libphobos/libdruntime/core/sys/linux/netinet/in_.d b/libphobos/libdruntime/core/sys/linux/netinet/in_.d
index 1b428f5ae..02ef4fb25 100644
--- a/libphobos/libdruntime/core/sys/linux/netinet/in_.d
+++ b/libphobos/libdruntime/core/sys/linux/netinet/in_.d
@@ -15,6 +15,7 @@ public import core.sys.posix.netinet.in_;
 
 version (CRuntime_Glibc)         version = linux_libc;
 else version (CRuntime_Musl)     version = linux_libc;
+else version (CRuntime_Urchin)   version = linux_libc;
 else version (CRuntime_Bionic)   version = linux_libc;
 else version (CRuntime_UClibc)   version = linux_libc;
 
diff --git a/libphobos/libdruntime/core/sys/posix/aio.d b/libphobos/libdruntime/core/sys/posix/aio.d
index 3a537a4a5..0104e1a19 100644
--- a/libphobos/libdruntime/core/sys/posix/aio.d
+++ b/libphobos/libdruntime/core/sys/posix/aio.d
@@ -97,6 +97,27 @@ else version (CRuntime_Musl)
         ubyte[32-2*(void*).sizeof] __dummy4;
     }
 }
+else version (CRuntime_Urchin)
+{
+    // https://github.com/xJ7v0/urchin/blob/main/include/aio.h 
+    struct aiocb
+    {
+        int aio_fildes;
+        int aio_lio_opcode;
+        int aio_reqprio;
+        void* aio_buf;   //volatile
+        size_t aio_nbytes;
+        sigevent aio_sigevent;
+        void* __td;
+        int[2] __lock;
+        int __err;   //volatile
+        ssize_t __ret;
+        off_t aio_offset;
+        void* __next;
+        void* __prev;
+        ubyte[32-2*(void*).sizeof] __dummy4;
+    }
+}
 else version (CRuntime_UClibc)
 {
     // UClibc does not implement aiocb.
@@ -222,6 +243,15 @@ else version (CRuntime_Musl)
         AIO_ALLDONE
     }
 }
+else version (CRuntime_Urchin)
+{
+    enum
+    {
+        AIO_CANCELED,
+        AIO_NOTCANCELED,
+        AIO_ALLDONE
+    }
+}
 else version (Darwin)
 {
     enum
@@ -269,6 +299,15 @@ else version (CRuntime_Musl)
         LIO_NOP
     }
 }
+else version (CRuntime_Urchin)
+{
+    enum
+    {
+        LIO_READ,
+        LIO_WRITE,
+        LIO_NOP
+    }
+}
 else version (Darwin)
 {
     enum
@@ -314,6 +353,14 @@ else version (CRuntime_Musl)
         LIO_NOWAIT
     }
 }
+else version (CRuntime_Urchin)
+{
+    enum
+    {
+        LIO_WAIT,
+        LIO_NOWAIT
+    }
+}
 else version (Darwin)
 {
     enum
@@ -394,6 +441,7 @@ else
     int aio_error(const(aiocb)* aiocbp);
     ssize_t aio_return(aiocb* aiocbp);
     pragma(mangle, muslRedirTime64Mangle!("aio_suspend", "__aio_suspend_time64"))
+    pragma(mangle, urchinRedirTime64Mangle!("aio_suspend", "__aio_suspend_time64"))
     int aio_suspend(const(aiocb*)* aiocb_list, int nitems, const(timespec)* timeout);
     int aio_cancel(int fd, aiocb* aiocbp);
     int lio_listio(int mode, const(aiocb*)* aiocb_list, int nitems, sigevent* sevp);
diff --git a/libphobos/libdruntime/core/sys/posix/arpa/inet.d b/libphobos/libdruntime/core/sys/posix/arpa/inet.d
index c602e17d3..17575a5ef 100644
--- a/libphobos/libdruntime/core/sys/posix/arpa/inet.d
+++ b/libphobos/libdruntime/core/sys/posix/arpa/inet.d
@@ -284,6 +284,29 @@ else version (CRuntime_Musl)
     const(char)*    inet_ntop(int, const scope void*, char*, socklen_t);
     int             inet_pton(int, const scope char*, void*);
 }
+else version (CRuntime_Urchin)
+{
+    alias uint16_t in_port_t;
+    alias uint32_t in_addr_t;
+
+    struct in_addr
+    {
+        in_addr_t s_addr;
+    }
+
+    @trusted pure
+    {
+    uint32_t htonl(uint32_t);
+    uint16_t htons(uint16_t);
+    uint32_t ntohl(uint32_t);
+    uint16_t ntohs(uint16_t);
+    }
+
+    in_addr_t       inet_addr(const scope char*);
+    char*           inet_ntoa(in_addr);
+    const(char)*    inet_ntop(int, const scope void*, char*, socklen_t);
+    int             inet_pton(int, const scope char*, void*);
+}
 else version (CRuntime_UClibc)
 {
     alias uint16_t in_port_t;
diff --git a/libphobos/libdruntime/core/sys/posix/config.d b/libphobos/libdruntime/core/sys/posix/config.d
index ae6752f22..0c1ef24e7 100644
--- a/libphobos/libdruntime/core/sys/posix/config.d
+++ b/libphobos/libdruntime/core/sys/posix/config.d
@@ -97,6 +97,28 @@ else version (CRuntime_Musl)
     else
         enum __WORDSIZE = 32;
 }
+else version (CRuntime_Urchin)
+{
+    enum _GNU_SOURCE         = false;
+    enum _DEFAULT_SOURCE     = false;
+    enum _ATFILE_SOURCE      = false;
+
+    // off_t is always 64 bits on Urchin
+    enum _FILE_OFFSET_BITS   = 64;
+
+    // Not present in Urchin sources
+    enum __REDIRECT          = false;
+
+    // Those three are irrelevant for Urchin as it always uses 64 bits off_t
+    enum __USE_FILE_OFFSET64 = _FILE_OFFSET_BITS == 64;
+    enum __USE_LARGEFILE     = __USE_FILE_OFFSET64 && !__REDIRECT;
+    enum __USE_LARGEFILE64   = __USE_FILE_OFFSET64 && !__REDIRECT;
+
+    version (D_LP64)
+        enum __WORDSIZE = 64;
+    else
+        enum __WORDSIZE = 32;
+}
 else version (CRuntime_UClibc)
 {
     enum _GNU_SOURCE         = false;
diff --git a/libphobos/libdruntime/core/sys/posix/dirent.d b/libphobos/libdruntime/core/sys/posix/dirent.d
index c7e8649d6..c19eb65df 100644
--- a/libphobos/libdruntime/core/sys/posix/dirent.d
+++ b/libphobos/libdruntime/core/sys/posix/dirent.d
@@ -395,6 +395,35 @@ else version (CRuntime_Musl)
         dirent* readdir(DIR*);
     }
 }
+else version (CRuntime_Urchin)
+{
+    enum
+    {
+        DT_UNKNOWN  = 0,
+        DT_FIFO     = 1,
+        DT_CHR      = 2,
+        DT_DIR      = 4,
+        DT_BLK      = 6,
+        DT_REG      = 8,
+        DT_LNK      = 10,
+        DT_SOCK     = 12,
+        DT_WHT      = 14
+    }
+
+    struct DIR
+    {
+    }
+
+    static if ( __USE_FILE_OFFSET64 )
+    {
+        dirent* readdir64(DIR*);
+        alias   readdir64 readdir;
+    }
+    else
+    {
+        dirent* readdir(DIR*);
+    }
+}
 else version (CRuntime_UClibc)
 {
     // NOTE: The following constants are non-standard Linux definitions
@@ -546,6 +575,10 @@ else version (CRuntime_Musl)
 {
     int readdir_r(DIR*, dirent*, dirent**);
 }
+else version (CRuntime_Urchin)
+{
+    int readdir_r(DIR*, dirent*, dirent**);
+}
 else version (CRuntime_UClibc)
 {
   static if ( __USE_LARGEFILE64 )
@@ -640,6 +673,11 @@ else version (CRuntime_Musl)
     void   seekdir(DIR*, c_long);
     c_long telldir(DIR*);
 }
+else version (CRuntime_Urchin)
+{
+    void   seekdir(DIR*, c_long);
+    c_long telldir(DIR*);
+}
 else version (CRuntime_UClibc)
 {
     void   seekdir(DIR*, c_long);
diff --git a/libphobos/libdruntime/core/sys/posix/dlfcn.d b/libphobos/libdruntime/core/sys/posix/dlfcn.d
index f457c1f22..2e615872c 100644
--- a/libphobos/libdruntime/core/sys/posix/dlfcn.d
+++ b/libphobos/libdruntime/core/sys/posix/dlfcn.d
@@ -189,8 +189,7 @@ version (CRuntime_Glibc)
         void* dli_saddr;
     }
 }
-else
-version (CRuntime_Musl)
+else version (CRuntime_Musl)
 {
     enum RTLD_LAZY   = 1;
     enum RTLD_NOW    = 2;
@@ -221,6 +220,37 @@ version (CRuntime_Musl)
     int dladdr(const(void) *, Dl_info *);
     int dlinfo(void *, int, void *);
 }
+else version (CRuntime_Urchin)
+{
+    enum RTLD_LAZY   = 1;
+    enum RTLD_NOW    = 2;
+    enum RTLD_NOLOAD = 4;
+    enum RTLD_NODELETE = 4096;
+    enum RTLD_GLOBAL = 256;
+    enum RTLD_LOCAL  = 0;
+
+    enum RTLD_NEXT    = cast(void *)-1;
+    enum RTLD_DEFAULT = cast(void *)0;
+
+    enum RTLD_DI_LINKMAP = 2;
+
+    int    dlclose(void *);
+    char  *dlerror();
+    void  *dlopen(const(char) *, int);
+
+    pragma(mangle, urchinRedirTime64Mangle!("dlsym", "__dlsym_time64"))
+    void  *dlsym(void *__restrict, const(char) *__restrict);
+
+    struct Dl_info
+    {
+        const(char)* dli_fname;
+        void* dli_fbase;
+        const(char)* dli_sname;
+        void* dli_saddr;
+    }
+    int dladdr(const(void) *, Dl_info *);
+    int dlinfo(void *, int, void *);
+}
 else version (Darwin)
 {
     enum RTLD_LAZY      = 0x00001;
@@ -418,6 +448,30 @@ else version (CRuntime_Musl)
         void*        dli_saddr;
     }
 }
+else version (CRuntime_Urchin)
+{
+    enum {
+        RTLD_LAZY     = 1,
+        RTLD_NOW      = 2,
+        RTLD_NOLOAD   = 4,
+        RTLD_NODELETE = 4096,
+        RTLD_GLOBAL   = 256,
+        RTLD_LOCAL    = 0,
+    }
+    int          dlclose(void*);
+    const(char)* dlerror();
+    void*        dlopen(const scope char*, int);
+    void*        dlsym(void*, const scope char*);
+
+    int dladdr(scope const void *addr, Dl_info *info);
+    struct Dl_info
+    {
+        const(char)* dli_fname;
+        void*        dli_fbase;
+        const(char)* dli_sname;
+        void*        dli_saddr;
+    }
+}
 else version (CRuntime_UClibc)
 {
     version (X86_Any)
diff --git a/libphobos/libdruntime/core/sys/posix/fcntl.d b/libphobos/libdruntime/core/sys/posix/fcntl.d
index c0e9006a0..9a403cbc7 100644
--- a/libphobos/libdruntime/core/sys/posix/fcntl.d
+++ b/libphobos/libdruntime/core/sys/posix/fcntl.d
@@ -433,6 +433,12 @@ version (linux)
         enum O_EXEC     = O_PATH;
         enum O_ACCMODE  = (3|O_SEARCH);
     }
+    else version (CRuntime_Urchin)
+    {
+        enum O_SEARCH   = O_PATH;
+        enum O_EXEC     = O_PATH;
+        enum O_ACCMODE  = (3|O_SEARCH);
+    }
     else
     {
         enum O_ACCMODE  = 0x3;
@@ -933,6 +939,10 @@ else version (CRuntime_Musl)
 {
     int open(const scope char*, int, ...);
 }
+else version (CRuntime_Urchin)
+{
+    int open(const scope char*, int, ...);
+}
 else version (CRuntime_UClibc)
 {
     static if ( __USE_FILE_OFFSET64 )
diff --git a/libphobos/libdruntime/core/sys/posix/grp.d b/libphobos/libdruntime/core/sys/posix/grp.d
index 3a9b993c0..f034062e3 100644
--- a/libphobos/libdruntime/core/sys/posix/grp.d
+++ b/libphobos/libdruntime/core/sys/posix/grp.d
@@ -147,6 +147,16 @@ else version (CRuntime_Musl)
         char**  gr_mem;
     }
 }
+else version (CRuntime_Urchin)
+{
+    struct group
+    {
+        char*   gr_name;
+        char*   gr_passwd;
+        gid_t   gr_gid;
+        char**  gr_mem;
+    }
+}
 else
 {
     static assert(false, "Unsupported platform");
@@ -211,6 +221,11 @@ else version (CRuntime_Musl)
     int getgrnam_r(const scope char*, group*, char*, size_t, group**);
     int getgrgid_r(gid_t, group*, char*, size_t, group**);
 }
+else version (CRuntime_Urchin)
+{
+    int getgrnam_r(const scope char*, group*, char*, size_t, group**);
+    int getgrgid_r(gid_t, group*, char*, size_t, group**);
+}
 else
 {
     static assert(false, "Unsupported platform");
@@ -282,6 +297,12 @@ else version (CRuntime_Musl)
     @trusted void endgrent();
     @trusted void setgrent();
 }
+else version (CRuntime_Urchin)
+{
+    group* getgrent();
+    @trusted void endgrent();
+    @trusted void setgrent();
+}
 else
 {
     static assert(false, "Unsupported platform");
diff --git a/libphobos/libdruntime/core/sys/posix/locale.d b/libphobos/libdruntime/core/sys/posix/locale.d
index 0864f7c63..59f9adc81 100644
--- a/libphobos/libdruntime/core/sys/posix/locale.d
+++ b/libphobos/libdruntime/core/sys/posix/locale.d
@@ -296,6 +296,82 @@ else version (CRuntime_Musl)
     /// Set the per-thread locale
     locale_t uselocale (locale_t locale);
 }
+else version (CRuntime_Urchin)
+{
+    ///
+    struct lconv
+    {
+        char*   decimal_point;
+        char*   thousands_sep;
+        char*   grouping;
+        char*   int_curr_symbol;
+        char*   currency_symbol;
+        char*   mon_decimal_point;
+        char*   mon_thousands_sep;
+        char*   mon_grouping;
+        char*   positive_sign;
+        char*   negative_sign;
+        char    int_frac_digits;
+        char    frac_digits;
+        char    p_cs_precedes;
+        char    p_sep_by_space;
+        char    n_cs_precedes;
+        char    n_sep_by_space;
+        char    p_sign_posn;
+        char    n_sign_posn;
+        char    int_p_cs_precedes;
+        char    int_p_sep_by_space;
+        char    int_n_cs_precedes;
+        char    int_n_sep_by_space;
+        char    int_p_sign_posn;
+        char    int_n_sign_posn;
+    }
+
+    ///
+    enum
+    {
+        LC_CTYPE    = 0,
+        LC_NUMERIC  = 1,
+        LC_TIME     = 2,
+        LC_COLLATE  = 3,
+        LC_MONETARY = 4,
+        LC_MESSAGES = 5,
+        LC_ALL      = 6,
+    }
+
+    ///
+    enum
+    {
+        LC_CTYPE_MASK    = (1 << LC_CTYPE),
+        LC_NUMERIC_MASK  = (1 << LC_NUMERIC),
+        LC_TIME_MASK     = (1 << LC_TIME),
+        LC_COLLATE_MASK  = (1 << LC_COLLATE),
+        LC_MONETARY_MASK = (1 << LC_MONETARY),
+        LC_MESSAGES_MASK = (1 << LC_MESSAGES),
+        LC_ALL_MASK      = 0x7fffffff,
+    }
+
+    private struct __locale_struct;
+
+    ///
+    alias locale_t = __locale_struct*;
+
+    ///
+    enum LC_GLOBAL_LOCALE = (cast(locale_t)-1);
+
+    /// Duplicate existing locale
+    locale_t duplocale(locale_t locale);
+    /// Free an allocated locale
+    void     freelocale(locale_t locale);
+    /// Natural language formatting for C
+    lconv*   localeconv();
+    /// Create a new locale
+    locale_t newlocale(int mask, const char* locale, locale_t base);
+    /// Set the C library's notion of natural language formatting style
+    char*    setlocale(int category, const char* locale);
+    /// Set the per-thread locale
+    locale_t uselocale (locale_t locale);
+}
 else version (OpenBSD)
 {
     ///
diff --git a/libphobos/libdruntime/core/sys/posix/mqueue.d b/libphobos/libdruntime/core/sys/posix/mqueue.d
index eae50d27d..cb857f166 100644
--- a/libphobos/libdruntime/core/sys/posix/mqueue.d
+++ b/libphobos/libdruntime/core/sys/posix/mqueue.d
@@ -182,6 +182,10 @@ pragma(mangle, muslRedirTime64Mangle!("mq_timedreceive", "__mq_timedreceive_time
 ssize_t mq_timedreceive (mqd_t mqdes, char* msg_ptr, size_t msg_len,
                          uint* msg_prio, const(timespec)* abs_timeout);
 
+pragma(mangle, urchinRedirTime64Mangle!("mq_timedreceive", "__mq_timedreceive_time64"))
+ssize_t mq_timedreceive (mqd_t mqdes, char* msg_ptr, size_t msg_len,
+                         uint* msg_prio, const(timespec)* abs_timeout);
+
 
 /**
  * Add a message to a message queue.
@@ -220,3 +224,7 @@ int mq_send (mqd_t mqdes, const(char)* msg_ptr, size_t msg_len, uint msg_prio);
 pragma(mangle, muslRedirTime64Mangle!("mq_timedsend", "__mq_timedsend_time64"))
 int mq_timedsend (mqd_t mqdes, const(char)* msg_ptr, size_t msg_len,
                    uint msg_prio, const(timespec)* abs_timeout);
+
+pragma(mangle, urchinRedirTime64Mangle!("mq_timedsend", "__mq_timedsend_time64"))
+int mq_timedsend (mqd_t mqdes, const(char)* msg_ptr, size_t msg_len,
+                   uint msg_prio, const(timespec)* abs_timeout);
diff --git a/libphobos/libdruntime/core/sys/posix/net/if_.d b/libphobos/libdruntime/core/sys/posix/net/if_.d
index 7fadcd884..c18096653 100644
--- a/libphobos/libdruntime/core/sys/posix/net/if_.d
+++ b/libphobos/libdruntime/core/sys/posix/net/if_.d
@@ -158,6 +158,21 @@ else version (CRuntime_Musl)
     if_nameindex_t* if_nameindex();
     void            if_freenameindex(if_nameindex_t*);
 }
+else version (CRuntime_Urchin)
+{
+    struct if_nameindex_t
+    {
+        uint    if_index;
+        char*   if_name;
+    }
+
+    enum IF_NAMESIZE = 16;
+
+    uint            if_nametoindex(const scope char*);
+    char*           if_indextoname(uint, char*);
+    if_nameindex_t* if_nameindex();
+    void            if_freenameindex(if_nameindex_t*);
+}
 else version (CRuntime_UClibc)
 {
     struct if_nameindex_t
diff --git a/libphobos/libdruntime/core/sys/posix/netdb.d b/libphobos/libdruntime/core/sys/posix/netdb.d
index 70a5fe190..981a81310 100644
--- a/libphobos/libdruntime/core/sys/posix/netdb.d
+++ b/libphobos/libdruntime/core/sys/posix/netdb.d
@@ -943,6 +943,84 @@ else version (CRuntime_Musl)
         EAI_OVERFLOW       = -12,
     }
 }
+else version (CRuntime_Urchin)
+{
+    struct hostent
+    {
+        char*   h_name;
+        char**  h_aliases;
+        int     h_addrtype;
+        int     h_length;
+        char**  h_addr_list;
+        char*   h_addr() @property { return h_addr_list[0]; } // non-standard
+    }
+
+    struct netent
+    {
+        char*     n_name;
+        char**    n_aliases;
+        int       n_addrtype;
+        uint32_t n_net;
+    }
+
+    struct protoent
+    {
+        char*   p_name;
+        char**  p_aliases;
+        int     p_proto;
+    }
+
+    struct servent
+    {
+        char*     s_name;
+        char**    s_aliases;
+        int       s_port;
+        char*     s_proto;
+    }
+
+    struct addrinfo
+    {
+        int         ai_flags;
+        int         ai_family;
+        int         ai_socktype;
+        int         ai_protocol;
+        socklen_t   ai_addrlen;
+        sockaddr*   ai_addr;
+        char*       ai_canonname;
+        addrinfo*   ai_next;
+    }
+
+    enum {
+        AI_PASSIVE         = 0x1,
+        AI_CANONNAME       = 0x2,
+        AI_NUMERICHOST     = 0x4,
+        AI_NUMERICSERV     = 0x400,
+        AI_V4MAPPED        = 0x8,
+        AI_ALL             = 0x10,
+        AI_ADDRCONFIG      = 0x20,
+    }
+    enum {
+        NI_NUMERICHOST     = 1,
+        NI_NUMERICSERV     = 2,
+        NI_NOFQDN          = 4,
+        NI_NAMEREQD        = 8,
+        NI_DGRAM           = 16,
+        NI_MAXSERV         = 32,
+        NI_MAXHOST         = 255,
+    }
+    enum {
+        EAI_BADFLAGS       = -1,
+        EAI_NONAME         = -2,
+        EAI_AGAIN          = -3,
+        EAI_FAIL           = -4,
+        EAI_FAMILY         = -6,
+        EAI_SOCKTYPE       = -7,
+        EAI_SERVICE        = -8,
+        EAI_MEMORY         = -10,
+        EAI_SYSTEM         = -11,
+        EAI_OVERFLOW       = -12,
+    }
+}
 else version (CRuntime_UClibc)
 {
     struct hostent
diff --git a/libphobos/libdruntime/core/sys/posix/netinet/in_.d b/libphobos/libdruntime/core/sys/posix/netinet/in_.d
index 5818ee6e2..b54778318 100644
--- a/libphobos/libdruntime/core/sys/posix/netinet/in_.d
+++ b/libphobos/libdruntime/core/sys/posix/netinet/in_.d
@@ -1597,6 +1597,45 @@ else version (CRuntime_Musl)
     extern __gshared immutable in6_addr in6addr_any;
     extern __gshared immutable in6_addr in6addr_loopback;
 }
+else version (CRuntime_Urchin)
+{
+
+    struct in6_addr {
+        union {
+            uint8_t[16] s6_addr;
+            uint16_t[8] s6_addr16;
+            uint32_t[4] s6_addr32;
+        }
+    }
+    struct sockaddr_in6 {
+        sa_family_t     sin6_family;
+        in_port_t       sin6_port;
+        uint32_t        sin6_flowinfo;
+        in6_addr        sin6_addr;
+        uint32_t        sin6_scope_id;
+    }
+
+    struct ipv6_mreq
+    {
+        in6_addr    ipv6mr_multiaddr;
+        uint        ipv6mr_interface;
+    }
+
+    enum : uint
+    {
+        IPPROTO_IPV6 = 41,
+
+        IPV6_UNICAST_HOPS   = 16,
+        IPV6_MULTICAST_IF   = 17,
+        IPV6_MULTICAST_HOPS = 18,
+        IPV6_MULTICAST_LOOP = 19,
+        IPV6_JOIN_GROUP     = 20,
+        IPV6_LEAVE_GROUP    = 21,
+        IPV6_V6ONLY         = 26
+    }
+    extern __gshared immutable in6_addr in6addr_any;
+    extern __gshared immutable in6_addr in6addr_loopback;
+}
 else version (CRuntime_UClibc)
 {
     struct in6_addr
diff --git a/libphobos/libdruntime/core/sys/posix/poll.d b/libphobos/libdruntime/core/sys/posix/poll.d
index 5901f62b5..920c1411c 100644
--- a/libphobos/libdruntime/core/sys/posix/poll.d
+++ b/libphobos/libdruntime/core/sys/posix/poll.d
@@ -163,6 +163,19 @@ else version (CRuntime_Musl)
 
     int poll(pollfd*, nfds_t, c_long);
 }
+else version (CRuntime_Urchin)
+{
+    struct pollfd
+    {
+        int     fd;
+        short   events;
+        short   revents;
+    }
+
+    alias uint nfds_t;
+
+    int poll(pollfd*, nfds_t, c_long);
+}
 else version (CRuntime_UClibc)
 {
     struct pollfd
diff --git a/libphobos/libdruntime/core/sys/posix/pthread.d b/libphobos/libdruntime/core/sys/posix/pthread.d
index 6c5f1a93e..838d29248 100644
--- a/libphobos/libdruntime/core/sys/posix/pthread.d
+++ b/libphobos/libdruntime/core/sys/posix/pthread.d
@@ -397,6 +397,23 @@ else version (CRuntime_Musl)
         PTHREAD_PROCESS_SHARED = 1
     }
 }
+else version (CRuntime_Urchin)
+{
+    enum
+    {
+        PTHREAD_CREATE_JOINABLE = 0,
+        PTHREAD_CREATE_DETACHED = 1
+    }
+
+    enum PTHREAD_MUTEX_INITIALIZER = pthread_mutex_t.init;
+    enum PTHREAD_ONCE_INIT = pthread_once_t.init;
+
+    enum
+    {
+        PTHREAD_PROCESS_PRIVATE = 0,
+        PTHREAD_PROCESS_SHARED = 1
+    }
+}
 else version (CRuntime_UClibc)
 {
     enum
@@ -677,6 +694,31 @@ else version (CRuntime_Musl)
         }
     }
 }
+else version (CRuntime_Urchin)
+{
+    struct __ptcb {
+        _pthread_cleanup_routine f;
+        void* __x;
+        __ptcb* __next;
+    }
+    void _pthread_cleanup_push(__ptcb*, _pthread_cleanup_routine, void*);
+    void _pthread_cleanup_pop(__ptcb*, int);
+
+    struct pthread_cleanup
+    {
+        __ptcb __cleanup = void;
+
+        extern (D) void push(F: _pthread_cleanup_routine)(F routine, void* arg )
+        {
+            _pthread_cleanup_push( &__cleanup, routine, arg );
+        }
+
+        extern (D) void pop()( int execute )
+        {
+            _pthread_cleanup_pop( &__cleanup, execute );
+        }
+    }
+}
 else version (CRuntime_UClibc)
 {
     struct _pthread_cleanup_buffer
@@ -863,6 +905,18 @@ else version (CRuntime_Musl)
     int pthread_barrierattr_init(pthread_barrierattr_t*);
     int pthread_barrierattr_setpshared(pthread_barrierattr_t*, int);
 }
+else version (CRuntime_Urchin)
+{
+    enum PTHREAD_BARRIER_SERIAL_THREAD = -1;
+
+    int pthread_barrier_destroy(pthread_barrier_t*);
+    int pthread_barrier_init(pthread_barrier_t*, const scope pthread_barrierattr_t*, uint);
+    int pthread_barrier_wait(pthread_barrier_t*);
+    int pthread_barrierattr_destroy(pthread_barrierattr_t*);
+    int pthread_barrierattr_getpshared(const scope pthread_barrierattr_t*, int*);
+    int pthread_barrierattr_init(pthread_barrierattr_t*);
+    int pthread_barrierattr_setpshared(pthread_barrierattr_t*, int);
+}
 else version (CRuntime_UClibc)
 {
     enum PTHREAD_BARRIER_SERIAL_THREAD = -1;
@@ -927,6 +981,11 @@ else version (CRuntime_Musl)
     int pthread_condattr_getclock(const scope pthread_condattr_t*, clockid_t*);
     int pthread_condattr_setclock(pthread_condattr_t*, clockid_t);
 }
+else version (CRuntime_Urchin)
+{
+    int pthread_condattr_getclock(const scope pthread_condattr_t*, clockid_t*);
+    int pthread_condattr_setclock(pthread_condattr_t*, clockid_t);
+}
 else version (CRuntime_UClibc)
 {
     int pthread_condattr_getclock(const scope pthread_condattr_t*, clockid_t*);
@@ -1010,6 +1069,14 @@ else version (CRuntime_Musl)
     int pthread_spin_trylock(pthread_spinlock_t*);
     int pthread_spin_unlock(pthread_spinlock_t*);
 }
+else version (CRuntime_Urchin)
+{
+    int pthread_spin_destroy(pthread_spinlock_t*);
+    int pthread_spin_init(pthread_spinlock_t*, int);
+    int pthread_spin_lock(pthread_spinlock_t*);
+    int pthread_spin_trylock(pthread_spinlock_t*);
+    int pthread_spin_unlock(pthread_spinlock_t*);
+}
 else version (CRuntime_UClibc)
 {
     int pthread_spin_destroy(pthread_spinlock_t*);
@@ -1182,6 +1249,16 @@ else version (CRuntime_Musl)
     }
     int pthread_mutexattr_settype(pthread_mutexattr_t*, int) @trusted;
 }
+else version (CRuntime_Urchin)
+{
+    enum {
+        PTHREAD_MUTEX_NORMAL      = 0,
+        PTHREAD_MUTEX_RECURSIVE   = 1,
+        PTHREAD_MUTEX_ERRORCHECK  = 2,
+        PTHREAD_MUTEX_DEFAULT     = PTHREAD_MUTEX_NORMAL,
+    }
+    int pthread_mutexattr_settype(pthread_mutexattr_t*, int) @trusted;
+}
 else version (CRuntime_UClibc)
 {
     enum
@@ -1249,6 +1326,10 @@ else version (CRuntime_Musl)
 {
     int pthread_getcpuclockid(pthread_t, clockid_t*);
 }
+else version (CRuntime_Urchin)
+{
+    int pthread_getcpuclockid(pthread_t, clockid_t*);
+}
 else version (CRuntime_UClibc)
 {
     int pthread_getcpuclockid(pthread_t, clockid_t*);
@@ -1320,6 +1401,12 @@ else version (CRuntime_Musl)
     int pthread_rwlock_timedrdlock(pthread_rwlock_t*, const scope timespec*);
     int pthread_rwlock_timedwrlock(pthread_rwlock_t*, const scope timespec*);
 }
+else version (CRuntime_Urchin)
+{
+    int pthread_mutex_timedlock(pthread_mutex_t*, const scope timespec*);
+    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, const scope timespec*);
+    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, const scope timespec*);
+}
 else version (CRuntime_UClibc)
 {
     int pthread_mutex_timedlock(pthread_mutex_t*, const scope timespec*);
@@ -1549,6 +1636,18 @@ else version (CRuntime_Musl)
     int pthread_setschedparam(pthread_t, int, const scope sched_param*);
     int pthread_setschedprio(pthread_t, int);
 }
+else version (CRuntime_Urchin)
+{
+    enum
+    {
+        PTHREAD_SCOPE_SYSTEM,
+        PTHREAD_SCOPE_PROCESS
+    }
+
+    int pthread_getschedparam(pthread_t, int*, sched_param*);
+    int pthread_setschedparam(pthread_t, int, const scope sched_param*);
+    int pthread_setschedprio(pthread_t, int);
+}
 else version (CRuntime_UClibc)
 {
     enum
@@ -1661,6 +1760,11 @@ else version (CRuntime_Musl)
     int pthread_attr_getstack(const scope pthread_attr_t*, void**, size_t*);
     int pthread_attr_setstacksize(pthread_attr_t*, size_t);
 }
+else version (CRuntime_Urchin)
+{
+    int pthread_attr_getstack(const scope pthread_attr_t*, void**, size_t*);
+    int pthread_attr_setstacksize(pthread_attr_t*, size_t);
+}
 else version (CRuntime_UClibc)
 {
     int pthread_attr_getstack(const scope pthread_attr_t*, void**, size_t*);
@@ -1762,6 +1866,15 @@ else version (CRuntime_Musl)
     int pthread_rwlockattr_getpshared(pthread_rwlockattr_t*, int*);
     int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int);
 }
+else version (CRuntime_Urchin)
+{
+    int pthread_condattr_getpshared(pthread_condattr_t*, int*);
+    int pthread_condattr_setpshared(pthread_condattr_t*, int);
+    int pthread_mutexattr_getpshared(pthread_mutexattr_t*, int*);
+    int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int);
+    int pthread_rwlockattr_getpshared(pthread_rwlockattr_t*, int*);
+    int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int);
+}
 else version (CRuntime_UClibc)
 {
     int pthread_condattr_getpshared(const scope pthread_condattr_t*, int*);
diff --git a/libphobos/libdruntime/core/sys/posix/pwd.d b/libphobos/libdruntime/core/sys/posix/pwd.d
index e2a77dec3..a571496d2 100644
--- a/libphobos/libdruntime/core/sys/posix/pwd.d
+++ b/libphobos/libdruntime/core/sys/posix/pwd.d
@@ -183,6 +183,19 @@ else version (CRuntime_Musl)
         char *pw_shell;
     }
 }
+else version (CRuntime_Urchin)
+{
+    struct passwd
+    {
+        char *pw_name;
+        char *pw_passwd;
+        uid_t pw_uid;
+        gid_t pw_gid;
+        char *pw_gecos;
+        char *pw_dir;
+        char *pw_shell;
+    }
+}
 else version (CRuntime_UClibc)
 {
     struct passwd
@@ -261,6 +274,11 @@ else version (CRuntime_Musl)
     int getpwnam_r(const scope char*, passwd*, char*, size_t, passwd**);
     int getpwuid_r(uid_t, passwd*, char*, size_t, passwd**);
 }
+else version (CRuntime_Urchin)
+{
+    int getpwnam_r(const scope char*, passwd*, char*, size_t, passwd**);
+    int getpwuid_r(uid_t, passwd*, char*, size_t, passwd**);
+}
 else version (CRuntime_UClibc)
 {
     int getpwnam_r(const scope char*, passwd*, char*, size_t, passwd**);
@@ -332,6 +350,12 @@ else version (CRuntime_Musl)
     passwd* getpwent();
     void    setpwent();
 }
+else version (CRuntime_Urchin)
+{
+    void    endpwent();
+    passwd* getpwent();
+    void    setpwent();
+}
 else version (CRuntime_UClibc)
 {
     void    endpwent();
diff --git a/libphobos/libdruntime/core/sys/posix/sched.d b/libphobos/libdruntime/core/sys/posix/sched.d
index ba7ab8984..bdec1bd10 100644
--- a/libphobos/libdruntime/core/sys/posix/sched.d
+++ b/libphobos/libdruntime/core/sys/posix/sched.d
@@ -72,6 +72,19 @@ version (linux)
             int __reserved3;
         }
     }
+    version (CRuntime_Urchin)
+    {
+        struct sched_param
+        {
+            int sched_priority;
+            int __reserved1;
+            static if (urchinRedirTime64)
+                c_long[2] __reserved2;
+            else
+                timespec[2] __reserved2;
+            int __reserved3;
+        }
+    }
     else
     {
         struct sched_param
@@ -215,6 +228,10 @@ else version (CRuntime_Musl)
 {
     int sched_yield();
 }
+else version (CRuntime_Urchin)
+{
+    int sched_yield();
+}
 else version (CRuntime_UClibc)
 {
     int sched_yield();
@@ -288,6 +305,13 @@ else version (CRuntime_Musl)
     pragma(mangle, muslRedirTime64Mangle!("sched_rr_get_interval", "__sched_rr_get_interval_time64"))
     int sched_rr_get_interval(pid_t, timespec*);
 }
+else version (CRuntime_Urchin)
+{
+    int sched_get_priority_max(int);
+    int sched_get_priority_min(int);
+    pragma(mangle, urchinRedirTime64Mangle!("sched_rr_get_interval", "__sched_rr_get_interval_time64"))
+    int sched_rr_get_interval(pid_t, timespec*);
+}
 else version (CRuntime_UClibc)
 {
     int sched_get_priority_max(int);
diff --git a/libphobos/libdruntime/core/sys/posix/semaphore.d b/libphobos/libdruntime/core/sys/posix/semaphore.d
index 4f3b6e951..db9b6d995 100644
--- a/libphobos/libdruntime/core/sys/posix/semaphore.d
+++ b/libphobos/libdruntime/core/sys/posix/semaphore.d
@@ -148,6 +148,14 @@ else version (CRuntime_Musl)
 
     enum SEM_FAILED = (sem_t*).init;
 }
+else version (CRuntime_Urchin)
+{
+    struct sem_t {
+        int[4*c_long.sizeof/int.sizeof] __val;
+    }
+
+    enum SEM_FAILED = (sem_t*).init;
+}
 else version (CRuntime_UClibc)
 {
     enum __SIZEOF_SEM_T  = 16;
@@ -219,6 +227,11 @@ else version (CRuntime_Musl)
     pragma(mangle, muslRedirTime64Mangle!("sem_timedwait", "__sem_timedwait_time64"))
     int sem_timedwait(sem_t*, const scope timespec*);
 }
+else version (CRuntime_Urchin)
+{
+    pragma(mangle, urchinRedirTime64Mangle!("sem_timedwait", "__sem_timedwait_time64"))
+    int sem_timedwait(sem_t*, const scope timespec*);
+}
 else version (CRuntime_UClibc)
 {
     int sem_timedwait(sem_t*, const scope timespec*);
diff --git a/libphobos/libdruntime/core/sys/posix/signal.d b/libphobos/libdruntime/core/sys/posix/signal.d
index a8b7f7511..68767d5f1 100644
--- a/libphobos/libdruntime/core/sys/posix/signal.d
+++ b/libphobos/libdruntime/core/sys/posix/signal.d
@@ -171,7 +171,7 @@ else version (NetBSD)
 else version (linux)
 {
     // Note: CRuntime_Bionic switched to calling these functions
-    // since Lollipop, and Glibc, UClib and Musl all implement them
+    // since Lollipop, and Glibc, UClib, Musl, Urchin all implement them
     // the same way since it's part of LSB.
     private extern (C) nothrow @nogc
     {
@@ -582,6 +582,20 @@ version (linux)
             void function() sa_restorer;
         }
     }
+    version (CRuntime_Urchin)
+    {
+        struct sigaction_t
+        {
+            union
+            {
+                sigfn_t     sa_handler;
+                sigactfn_t  sa_sigaction;
+            }
+            sigset_t        sa_mask;
+            int             sa_flags;
+            void function() sa_restorer;
+        }
+    }
     else version (CRuntime_Bionic)
     {
         version (D_LP64)
@@ -1610,6 +1624,20 @@ else version (CRuntime_Musl)
     int sigsuspend(const scope sigset_t*);
     int sigwait(const scope sigset_t*, int*);
 }
+else version (CRuntime_Urchin)
+{
+    int kill(pid_t, int);
+    int sigaction(int, const scope sigaction_t*, sigaction_t*);
+    int sigaddset(sigset_t*, int);
+    int sigdelset(sigset_t*, int);
+    int sigemptyset(sigset_t*);
+    int sigfillset(sigset_t*);
+    int sigismember(const scope sigset_t*, int);
+    int sigpending(sigset_t*);
+    int sigprocmask(int, const scope sigset_t*, sigset_t*);
+    int sigsuspend(const scope sigset_t*);
+    int sigwait(const scope sigset_t*, int*);
+}
 else version (CRuntime_UClibc)
 {
     int kill(pid_t, int);
@@ -2799,6 +2827,82 @@ else version (CRuntime_Musl)
     int sigpause(int);
     int sigrelse(int);
 }
+else version (CRuntime_Urchin)
+{
+    enum SS_ONSTACK = 1;
+    enum SS_DISABLE = 2;
+
+    version (ARM)
+    {
+        enum MINSIGSTKSZ = 2048;
+        enum SIGSTKSZ    = 8192;
+    }
+    else version (AArch64)
+    {
+        enum MINSIGSTKSZ = 6144;
+        enum SIGSTKSZ    = 12288;
+    }
+    else version (IBMZ_Any)
+    {
+        enum MINSIGSTKSZ = 4096;
+        enum SIGSTKSZ    = 10240;
+    }
+    else version (MIPS_Any)
+    {
+        enum MINSIGSTKSZ = 2048;
+        enum SIGSTKSZ    = 8192;
+    }
+    else version (PPC_Any)
+    {
+        enum MINSIGSTKSZ = 4096;
+        enum SIGSTKSZ    = 10240;
+    }
+    else version (X86_Any)
+    {
+        enum MINSIGSTKSZ = 2048;
+        enum SIGSTKSZ    = 8192;
+    }
+    else
+        static assert(0, "unimplemented");
+
+    //ucontext_t (defined in core.sys.posix.ucontext)
+    //mcontext_t (defined in core.sys.posix.ucontext)
+
+    version (MIPS_Any)
+    {
+        struct stack_t
+        {
+            void*  ss_sp;
+            size_t ss_size;
+            int    ss_flags;
+        }
+    }
+    else
+    {
+        struct stack_t
+        {
+            void*  ss_sp;
+            int    ss_flags;
+            size_t ss_size;
+        }
+    }
+
+    sigfn_t bsd_signal(int sig, sigfn_t func);
+    sigfn_t sigset(int sig, sigfn_t func);
+
+  nothrow:
+  @nogc:
+    sigfn_t2 bsd_signal(int sig, sigfn_t2 func);
+    sigfn_t2 sigset(int sig, sigfn_t2 func);
+
+    int killpg(pid_t, int);
+    int sigaltstack(const scope stack_t*, stack_t*);
+    int sighold(int);
+    int sigignore(int);
+    int siginterrupt(int, int);
+    int sigpause(int);
+    int sigrelse(int);
+}
 else version (CRuntime_UClibc)
 {
     enum SS_ONSTACK     = 1;
@@ -3040,6 +3144,13 @@ else version (CRuntime_Musl)
     int sigtimedwait(const scope sigset_t*, siginfo_t*, const scope timespec*);
     int sigwaitinfo(const scope sigset_t*, siginfo_t*);
 }
+else version (CRuntime_Urchin)
+{
+    int sigqueue(pid_t, int, const sigval);
+    pragma(mangle, urchinRedirTime64Mangle!("sigtimedwait", "__sigtimedwait_time64"))
+    int sigtimedwait(const scope sigset_t*, siginfo_t*, const scope timespec*);
+    int sigwaitinfo(const scope sigset_t*, siginfo_t*);
+}
 else version (CRuntime_UClibc)
 {
     int sigqueue(pid_t, int, const sigval);
@@ -3104,6 +3215,11 @@ else version (CRuntime_Musl)
     int pthread_kill(pthread_t, int);
     int pthread_sigmask(int, const scope sigset_t*, sigset_t*);
 }
+else version (CRuntime_Urchin)
+{
+    int pthread_kill(pthread_t, int);
+    int pthread_sigmask(int, const scope sigset_t*, sigset_t*);
+}
 else version (CRuntime_UClibc)
 {
     int pthread_kill(pthread_t, int);
diff --git a/libphobos/libdruntime/core/sys/posix/spawn.d b/libphobos/libdruntime/core/sys/posix/spawn.d
index 789053396..d648cb170 100644
--- a/libphobos/libdruntime/core/sys/posix/spawn.d
+++ b/libphobos/libdruntime/core/sys/posix/spawn.d
@@ -18,6 +18,8 @@ Bionic libc: https://android.googlesource.com/platform/bionic.git/+/master/libc/
 
 Musl libc: https://git.musl-libc.org/cgit/musl/tree/include/spawn.h
 
+Urchin libc: https://github.com/xJ7v0/urchin/blob/main/include/spawn.h
+
 uClibc: https://git.uclibc.org/uClibc/tree/include/spawn.h
 
 Darwin XNU:
@@ -183,6 +185,36 @@ version (linux)
             int[16] __pad;
         }
     }
+    else version (CRuntime_Urchin)
+    {
+        // Source: https://github.com/xJ7v0/urchin/blob/main/include/spawn.h
+        enum
+        {
+            POSIX_SPAWN_RESETIDS = 1,
+            POSIX_SPAWN_SETPGROUP = 2,
+            POSIX_SPAWN_SETSIGDEF = 4,
+            POSIX_SPAWN_SETSIGMASK = 8,
+            POSIX_SPAWN_SETSCHEDPARAM = 16,
+            POSIX_SPAWN_SETSCHEDULER = 32,
+            POSIX_SPAWN_USEVFORK = 64,
+            POSIX_SPAWN_SETSID = 128
+        }
+        struct posix_spawnattr_t
+        {
+            int __flags;
+            pid_t __pgrp;
+            sigset_t __def, __mask;
+            int __prio, __pol;
+            void* __fn;
+            char[64 - (void*).sizeof] __pad = void;
+        }
+        struct posix_spawn_file_actions_t
+        {
+            int[2] __pad0;
+            void* __actions;
+            int[16] __pad;
+        }
+    }
     else version (CRuntime_UClibc)
     {
         // Source: https://git.uclibc.org/uClibc/tree/include/spawn.h
diff --git a/libphobos/libdruntime/core/sys/posix/stdc/time.d b/libphobos/libdruntime/core/sys/posix/stdc/time.d
index d48a0ea3e..68715e4d0 100644
--- a/libphobos/libdruntime/core/sys/posix/stdc/time.d
+++ b/libphobos/libdruntime/core/sys/posix/stdc/time.d
@@ -62,6 +62,11 @@ else version (CRuntime_Musl)
     enum clock_t CLOCKS_PER_SEC = 1_000_000;
     clock_t clock();
 }
+else version (CRuntime_Urchin)
+{
+    enum clock_t CLOCKS_PER_SEC = 1_000_000;
+    clock_t clock();
+}
 else version (CRuntime_Bionic)
 {
     enum clock_t CLOCKS_PER_SEC = 1_000_000;
@@ -178,6 +183,13 @@ else version (CRuntime_Musl)
     ///
     extern __gshared const(char)*[2] tzname; // non-standard
 }
+else version (CRuntime_Urchin)
+{
+    ///
+    void tzset();                            // non-standard
+    ///
+    extern __gshared const(char)*[2] tzname; // non-standard
+}
 else version (CRuntime_UClibc)
 {
     ///
diff --git a/libphobos/libdruntime/core/sys/posix/stdio.d b/libphobos/libdruntime/core/sys/posix/stdio.d
index d37998902..27e1063e3 100644
--- a/libphobos/libdruntime/core/sys/posix/stdio.d
+++ b/libphobos/libdruntime/core/sys/posix/stdio.d
@@ -211,6 +211,37 @@ else version (CRuntime_Musl)
         FILE* tmpfile();
     }
 }
+else version (CRuntime_Urchin)
+{
+    static if ( __USE_FILE_OFFSET64 )
+    {
+        int   fgetpos64(FILE*, fpos_t *);
+        alias fgetpos64 fgetpos;
+
+        FILE* fopen64(const scope char*, const scope char*);
+        alias fopen64 fopen;
+
+        FILE* freopen64(const scope char*, const scope char*, FILE*);
+        alias freopen64 freopen;
+
+        int   fseek(FILE*, c_long, int);
+
+        int   fsetpos64(FILE*, const scope fpos_t*);
+        alias fsetpos64 fsetpos;
+
+        FILE* tmpfile64();
+        alias tmpfile64 tmpfile;
+    }
+    else
+    {
+        int   fgetpos(FILE*, fpos_t *);
+        FILE* fopen(const scope char*, const scope char*);
+        FILE* freopen(const scope char*, const scope char*, FILE*);
+        int   fseek(FILE*, c_long, int);
+        int   fsetpos(FILE*, const scope fpos_t*);
+        FILE* tmpfile();
+    }
+}
 else version (Solaris)
 {
     static if (__USE_FILE_OFFSET64 && __WORDSIZE != 64)
@@ -343,6 +374,33 @@ else version (CRuntime_Musl)
     ssize_t getdelim(char**, size_t*, int, FILE*);
     ssize_t getline(char**, size_t*, FILE*);
 }
+else version (CRuntime_Urchin)
+{
+    enum L_ctermid = 20;
+
+    static if ( __USE_FILE_OFFSET64 )
+    {
+        int   fseeko64(FILE*, off_t, int);
+        alias fseeko64 fseeko;
+    }
+    else
+    {
+        int   fseeko(FILE*, off_t, int);
+    }
+
+    static if ( __USE_FILE_OFFSET64 )
+    {
+        off_t ftello64(FILE*);
+        alias ftello64 ftello;
+    }
+    else
+    {
+        off_t ftello(FILE*);
+    }
+
+    ssize_t getdelim(char**, size_t*, int, FILE*);
+    ssize_t getline(char**, size_t*, FILE*);
+}
 else version (CRuntime_Bionic)
 {
     enum L_ctermid = 1024;
@@ -483,6 +541,8 @@ else version (CRuntime_UClibc)
 // http://git.musl-libc.org/cgit/musl/commit/src/stdio/open_memstream.c?id=b158b32a44d56ef20407d4285b58180447ffff1f
 else version (CRuntime_Musl)
     version = HaveMemstream;
+else version (CRuntime_Urchin)
+    version = HaveMemstream;
 
 version (HaveMemstream)
 {
@@ -525,6 +585,16 @@ else version (CRuntime_Musl)
     int    putc_unlocked(int, FILE*);
     int    putchar_unlocked(int);
 }
+else version (CRuntime_Urchin)
+{
+    void   flockfile(FILE*);
+    int    ftrylockfile(FILE*);
+    void   funlockfile(FILE*);
+    int    getc_unlocked(FILE*);
+    int    getchar_unlocked();
+    int    putc_unlocked(int, FILE*);
+    int    putchar_unlocked(int);
+}
 else version (CRuntime_Bionic)
 {
     void   flockfile(FILE*);
@@ -626,6 +696,10 @@ else version (CRuntime_Musl)
 {
     enum P_tmpdir  = "/tmp";
 }
+else version (CRuntime_Urchin)
+{
+    enum P_tmpdir  = "/tmp";
+}
 else version (Darwin)
 {
     enum P_tmpdir  = "/var/tmp";
diff --git a/libphobos/libdruntime/core/sys/posix/stdlib.d b/libphobos/libdruntime/core/sys/posix/stdlib.d
index 8dd7b68e8..b80350a8b 100644
--- a/libphobos/libdruntime/core/sys/posix/stdlib.d
+++ b/libphobos/libdruntime/core/sys/posix/stdlib.d
@@ -129,6 +129,10 @@ else version (CRuntime_Musl)
 {
     int posix_memalign(scope void**, size_t, size_t) pure;
 }
+else version (CRuntime_Urchin)
+{
+    int posix_memalign(scope void**, size_t, size_t) pure;
+}
 else version (CRuntime_UClibc)
 {
     int posix_memalign(scope void**, size_t, size_t) pure;
@@ -203,6 +207,11 @@ else version (CRuntime_Musl)
     int setenv(const scope char*, const scope char*, int);
     int unsetenv(const scope char*);
 }
+else version (CRuntime_Urchin)
+{
+    int setenv(const scope char*, const scope char*, int);
+    int unsetenv(const scope char*);
+}
 else version (CRuntime_UClibc)
 {
     int setenv(const scope char*, const scope char*, int);
@@ -614,6 +623,49 @@ else version (CRuntime_Musl)
     int    mkstemp(char*);
   }
 
+}
+else version (CRuntime_Urchin)
+{
+    c_long a64l(const scope char*);
+    double drand48();
+    char*  ecvt(double, int, int *, int *); // LEGACY
+    double erand48(ref ushort[3]);
+    char*  fcvt(double, int, int *, int *); // LEGACY
+    char*  gcvt(double, int, char*); // LEGACY
+    int    getsubopt(char**, const scope char**, char**);
+    int    grantpt(int);
+    char*  initstate(uint, char*, size_t);
+    c_long jrand48(ref ushort[3]);
+    char*  l64a(c_long);
+    void   lcong48(ref ushort[7]);
+    c_long lrand48();
+    char*  mktemp(char*); // LEGACY
+    char*  mkdtemp(char*); // Defined in IEEE 1003.1, 2008 Edition
+    int    mkstemp(char*);
+    c_long mrand48();
+    c_long nrand48(ref ushort[3]);
+    int    posix_openpt(int);
+    char*  ptsname(int);
+    int    putenv(char*);
+    c_long random();
+    char*  realpath(const scope char*, char*);
+    ushort *seed48(ref ushort[3]);
+    void   setkey(const scope char*);
+    char*  setstate(const scope char*);
+    void   srand48(c_long);
+    void   srandom(uint);
+    int    unlockpt(int);
+
+  static if ( __USE_LARGEFILE64 )
+  {
+    int    mkstemp64(char*);
+    alias  mkstemp64 mkstemp;
+  }
+  else
+  {
+    int    mkstemp(char*);
+  }
+
 }
 else version (Solaris)
 {
diff --git a/libphobos/libdruntime/core/sys/posix/sys/ioctl.d b/libphobos/libdruntime/core/sys/posix/sys/ioctl.d
index caf3ebafb..23d8e619b 100644
--- a/libphobos/libdruntime/core/sys/posix/sys/ioctl.d
+++ b/libphobos/libdruntime/core/sys/posix/sys/ioctl.d
@@ -442,6 +442,10 @@ else version (CRuntime_Musl)
 {
     int ioctl(int, int, ...);
 }
+else version (CRuntime_Urchin)
+{
+    int ioctl(int, int, ...);
+}
 else version (CRuntime_UClibc)
 {
     int ioctl(int __fd, c_ulong __request, ...);
diff --git a/libphobos/libdruntime/core/sys/posix/sys/ipc.d b/libphobos/libdruntime/core/sys/posix/sys/ipc.d
index 32caba95a..91c8f075a 100644
--- a/libphobos/libdruntime/core/sys/posix/sys/ipc.d
+++ b/libphobos/libdruntime/core/sys/posix/sys/ipc.d
@@ -291,6 +291,10 @@ else version (CRuntime_Musl)
 {
     key_t ftok(const scope char*, int);
 }
+else version (CRuntime_Urchin)
+{
+    key_t ftok(const scope char*, int);
+}
 else version (CRuntime_UClibc)
 {
     key_t ftok(const scope char*, int);
diff --git a/libphobos/libdruntime/core/sys/posix/sys/mman.d b/libphobos/libdruntime/core/sys/posix/sys/mman.d
index b1eb9fa81..b6dfa7429 100644
--- a/libphobos/libdruntime/core/sys/posix/sys/mman.d
+++ b/libphobos/libdruntime/core/sys/posix/sys/mman.d
@@ -90,6 +90,10 @@ else version (CRuntime_Musl)
 {
     int posix_madvise(void *, size_t, int);
 }
+else version (CRuntime_Urchin)
+{
+    int posix_madvise(void *, size_t, int);
+}
 else version (CRuntime_UClibc)
 {
     int posix_madvise(void *__addr, size_t __len, int __advice);
@@ -300,6 +304,15 @@ else version (CRuntime_Musl)
         void* mmap(void*, size_t, int, int, int, off_t);
     int munmap(void*, size_t);
 }
+else version (CRuntime_Urchin)
+{
+    static if (__USE_LARGEFILE64) void* mmap64(void*, size_t, int, int, int, off_t);
+    static if (__USE_FILE_OFFSET64)
+        alias mmap = mmap64;
+    else
+        void* mmap(void*, size_t, int, int, int, off_t);
+    int munmap(void*, size_t);
+}
 else version (CRuntime_UClibc)
 {
     static if (__USE_LARGEFILE64) void* mmap64(void*, size_t, int, int, int, off_t);
@@ -520,6 +533,10 @@ else version (CRuntime_Musl)
 {
     int msync(void*, size_t, int);
 }
+else version (CRuntime_Urchin)
+{
+    int msync(void*, size_t, int);
+}
 else version (CRuntime_UClibc)
 {
     int msync(void*, size_t, int);
@@ -645,6 +662,11 @@ else version (CRuntime_Musl)
     int mlockall(int);
     int munlockall();
 }
+else version (CRuntime_Urchin)
+{
+    int mlockall(int);
+    int munlockall();
+}
 else version (CRuntime_UClibc)
 {
     int mlockall(int);
@@ -708,6 +730,11 @@ else version (CRuntime_Musl)
     int mlock(const scope void*, size_t);
     int munlock(const scope void*, size_t);
 }
+else version (CRuntime_Urchin)
+{
+    int mlock(const scope void*, size_t);
+    int munlock(const scope void*, size_t);
+}
 else version (CRuntime_UClibc)
 {
     int mlock(const scope void*, size_t);
@@ -761,6 +788,10 @@ else version (CRuntime_Musl)
 {
     int mprotect(void*, size_t, int);
 }
+else version (CRuntime_Urchin)
+{
+    int mprotect(void*, size_t, int);
+}
 else version (CRuntime_UClibc)
 {
     int mprotect(void*, size_t, int);
@@ -821,6 +852,11 @@ else version (CRuntime_Musl)
     int shm_open(const scope char*, int, mode_t);
     int shm_unlink(const scope char*);
 }
+else version (CRuntime_Urchin)
+{
+    int shm_open(const scope char*, int, mode_t);
+    int shm_unlink(const scope char*);
+}
 else version (CRuntime_UClibc)
 {
     int shm_open(const scope char*, int, mode_t);
diff --git a/libphobos/libdruntime/core/sys/posix/sys/resource.d b/libphobos/libdruntime/core/sys/posix/sys/resource.d
index 3a9a18763..f2e2f2ea8 100644
--- a/libphobos/libdruntime/core/sys/posix/sys/resource.d
+++ b/libphobos/libdruntime/core/sys/posix/sys/resource.d
@@ -121,6 +121,8 @@ version (linux)
         c_long ru_nivcsw;
         version (CRuntime_Musl)
             c_long[16] __reserved;
+        else version (CRuntime_Urchin)
+            c_long[16] __reserved;
     }
 
     version (MIPS_Any)
@@ -569,6 +571,17 @@ else version (CRuntime_Musl)
     pragma(mangle, muslRedirTime64Mangle!("getrusage", "__getrusage_time64"))
     int getrusage(int, rusage*);
 }
+else version (CRuntime_Urchin)
+{
+    int getpriority(int, id_t);
+    int setpriority(int, id_t, int);
+    int getrlimit(int, rlimit*);
+    int setrlimit(int, const scope rlimit*);
+    alias getrlimit getrlimit64;
+    alias setrlimit setrlimit64;
+    pragma(mangle, urchinRedirTime64Mangle!("getrusage", "__getrusage_time64"))
+    int getrusage(int, rusage*);
+}
 else version (Solaris)
 {
     int getpriority(int, int);
diff --git a/libphobos/libdruntime/core/sys/posix/sys/select.d b/libphobos/libdruntime/core/sys/posix/sys/select.d
index bd3425032..cb0a83a7e 100644
--- a/libphobos/libdruntime/core/sys/posix/sys/select.d
+++ b/libphobos/libdruntime/core/sys/posix/sys/select.d
@@ -510,6 +510,55 @@ else version (CRuntime_Musl)
     pragma(mangle, muslRedirTime64Mangle!("select", "__select_time64"))
     int select(int, fd_set*, fd_set*, fd_set*, timeval*);
 }
+else version (CRuntime_Urchin)
+{
+    enum FD_SETSIZE = 1024;
+
+    alias ulong fd_mask;
+
+    private
+    {
+        enum uint __NFDBITS = 8 * fd_mask.sizeof;
+
+        extern (D) auto __FDELT( int d ) pure
+        {
+            return d / __NFDBITS;
+        }
+
+        extern (D) auto __FDMASK( int d ) pure
+        {
+            return cast(fd_mask) 1 << ( d % __NFDBITS );
+        }
+    }
+
+    struct fd_set {
+        ulong[FD_SETSIZE / 8 / long.sizeof] fds_bits;
+    }
+
+    extern (D) void FD_CLR( int fd, fd_set* fdset ) pure
+    {
+        fdset.fds_bits[__FDELT( fd )] &= ~__FDMASK( fd );
+    }
+
+    extern (D) bool FD_ISSET( int fd, const(fd_set)* fdset ) pure
+    {
+        return (fdset.fds_bits[__FDELT( fd )] & __FDMASK( fd )) != 0;
+    }
+
+    extern (D) void FD_SET( int fd, fd_set* fdset ) pure
+    {
+        fdset.fds_bits[__FDELT( fd )] |= __FDMASK( fd );
+    }
+
+    extern (D) void FD_ZERO( fd_set* fdset ) pure
+    {
+        fdset.fds_bits[0 .. $] = 0;
+    }
+    pragma(mangle, urchinRedirTime64Mangle!("pselect", "__pselect_time64"))
+    int pselect(int, fd_set*, fd_set*, fd_set*, const scope timespec*, const scope sigset_t*);
+    pragma(mangle, urchinRedirTime64Mangle!("select", "__select_time64"))
+    int select(int, fd_set*, fd_set*, fd_set*, timeval*);
+}
 else version (CRuntime_UClibc)
 {
     private
diff --git a/libphobos/libdruntime/core/sys/posix/sys/shm.d b/libphobos/libdruntime/core/sys/posix/sys/shm.d
index 6ecdc0def..84eb32f17 100644
--- a/libphobos/libdruntime/core/sys/posix/sys/shm.d
+++ b/libphobos/libdruntime/core/sys/posix/sys/shm.d
@@ -258,6 +258,15 @@ else version (CRuntime_Musl)
     int   shmdt(const scope void*);
     int   shmget(key_t, size_t, int);
 }
+else version (CRuntime_Urchin)
+{
+    enum SHMLBA = 4096;
+
+    void* shmat(int, const scope void*, int);
+    int   shmctl(int, int, shmid_ds*);
+    int   shmdt(const scope void*);
+    int   shmget(key_t, size_t, int);
+}
 else version (CRuntime_Bionic)
 {
     enum SHMLBA = 4096;
diff --git a/libphobos/libdruntime/core/sys/posix/sys/socket.d b/libphobos/libdruntime/core/sys/posix/sys/socket.d
index 7c6fab631..30d1bf7c2 100644
--- a/libphobos/libdruntime/core/sys/posix/sys/socket.d
+++ b/libphobos/libdruntime/core/sys/posix/sys/socket.d
@@ -214,6 +214,33 @@ version (linux)
             }
         }
     }
+    version (CRuntime_Urchin)
+    {
+        extern (D)
+        {
+            private size_t __CMSG_LEN(inout(cmsghdr)* cmsg) pure nothrow @nogc
+            {
+                return (cmsg.cmsg_len + size_t.sizeof -1) & cast(size_t)(~(size_t.sizeof - 1));
+            }
+
+            private inout(cmsghdr)* __CMSG_NEXT(inout(cmsghdr)* cmsg) pure nothrow @nogc
+            {
+                return cmsg + __CMSG_LEN(cmsg);
+            }
+
+            private inout(msghdr)* __MHDR_END(inout(msghdr)* mhdr) pure nothrow @nogc
+            {
+                return cast(inout(msghdr)*)(mhdr.msg_control + mhdr.msg_controllen);
+            }
+
+            inout(cmsghdr)* CMSG_NXTHDR(inout(msghdr)* msg, inout(cmsghdr)* cmsg) pure nothrow @nogc
+            {
+                return cmsg.cmsg_len < cmsghdr.sizeof ||
+                    __CMSG_LEN(cmsg) + cmsghdr.sizeof >= __MHDR_END(msg) - cast(inout(msghdr)*)(cmsg)
+                        ? cast(inout(cmsghdr)*) null : cast(inout(cmsghdr)*) __CMSG_NEXT(cmsg);
+            }
+        }
+    }
     else
     {
         private inout(cmsghdr)* __cmsg_nxthdr(inout(msghdr)*, inout(cmsghdr)*) pure nothrow @nogc;
@@ -1808,6 +1835,27 @@ else version (CRuntime_Musl)
     int     sockatmark(int);
     int     socketpair(int, int, int, ref int[2]);
 }
+else version (CRuntime_Urchin)
+{
+    int     accept(int, sockaddr*, socklen_t*);
+    int     bind(int, const scope sockaddr*, socklen_t);
+    int     connect(int, const scope sockaddr*, socklen_t);
+    int     getpeername(int, sockaddr*, socklen_t*);
+    int     getsockname(int, sockaddr*, socklen_t*);
+    int     getsockopt(int, int, int, void*, socklen_t*);
+    int     listen(int, int);
+    ssize_t recv(int, void*, size_t, int);
+    ssize_t recvfrom(int, void*, size_t, int, sockaddr*, socklen_t*);
+    ssize_t recvmsg(int, msghdr*, int);
+    ssize_t send(int, const scope void*, size_t, int);
+    ssize_t sendmsg(int, const scope msghdr*, int);
+    ssize_t sendto(int, const scope void*, size_t, int, const scope sockaddr*, socklen_t);
+    int     setsockopt(int, int, int, const scope void*, socklen_t);
+    int     shutdown(int, int);
+    int     socket(int, int, int);
+    int     sockatmark(int);
+    int     socketpair(int, int, int, ref int[2]);
+}
 else version (CRuntime_UClibc)
 {
     int     accept(int, sockaddr*, socklen_t*);
diff --git a/libphobos/libdruntime/core/sys/posix/sys/stat.d b/libphobos/libdruntime/core/sys/posix/sys/stat.d
index b89478fe7..7d2a06760 100644
--- a/libphobos/libdruntime/core/sys/posix/sys/stat.d
+++ b/libphobos/libdruntime/core/sys/posix/sys/stat.d
@@ -1752,6 +1752,44 @@ else version (CRuntime_Musl)
     int utimensat(int dirfd, const char *pathname,
         ref const(timespec)[2] times, int flags);
 }
+else version (CRuntime_Urchin)
+{
+    enum {
+        S_IRUSR    = 0x100, // octal 0400
+        S_IWUSR    = 0x080, // octal 0200
+        S_IXUSR    = 0x040, // octal 0100
+        S_IRWXU    = S_IRUSR | S_IWUSR | S_IXUSR,
+
+        S_IRGRP    = S_IRUSR >> 3,
+        S_IWGRP    = S_IWUSR >> 3,
+        S_IXGRP    = S_IXUSR >> 3,
+        S_IRWXG    = S_IRWXU >> 3,
+
+        S_IROTH    = S_IRGRP >> 3,
+        S_IWOTH    = S_IWGRP >> 3,
+        S_IXOTH    = S_IXGRP >> 3,
+        S_IRWXO    = S_IRWXG >> 3,
+    }
+
+    private
+    {
+        extern (D) bool S_ISTYPE( mode_t mode, uint mask )
+        {
+            return ( mode & S_IFMT ) == mask;
+        }
+    }
+
+    extern (D) bool S_ISBLK( mode_t mode )  { return S_ISTYPE( mode, S_IFBLK );  }
+    extern (D) bool S_ISCHR( mode_t mode )  { return S_ISTYPE( mode, S_IFCHR );  }
+    extern (D) bool S_ISDIR( mode_t mode )  { return S_ISTYPE( mode, S_IFDIR );  }
+    extern (D) bool S_ISFIFO( mode_t mode ) { return S_ISTYPE( mode, S_IFIFO );  }
+    extern (D) bool S_ISREG( mode_t mode )  { return S_ISTYPE( mode, S_IFREG );  }
+    extern (D) bool S_ISLNK( mode_t mode )  { return S_ISTYPE( mode, S_IFLNK );  }
+    extern (D) bool S_ISSOCK( mode_t mode ) { return S_ISTYPE( mode, S_IFSOCK ); }
+
+    int utimensat(int dirfd, const char *pathname,
+        ref const(timespec)[2] times, int flags);
+}
 else version (CRuntime_UClibc)
 {
     enum S_IRUSR    = 0x100; // octal 0400
@@ -1960,6 +1998,19 @@ else version (CRuntime_Musl)
     alias lstat lstat64;
     alias stat stat64;
 }
+else version (CRuntime_Urchin)
+{
+    pragma(mangle, urchinRedirTime64Mangle!("stat", "__stat_time64"))
+    int stat(const scope char*, stat_t*);
+    pragma(mangle, urchinRedirTime64Mangle!("fstat", "__fstat_time64"))
+    int fstat(int, stat_t*);
+    pragma(mangle, urchinRedirTime64Mangle!("lstat", "__lstat_time64"))
+    int lstat(const scope char*, stat_t*);
+
+    alias fstat fstat64;
+    alias lstat lstat64;
+    alias stat stat64;
+}
 else version (CRuntime_UClibc)
 {
   static if ( __USE_LARGEFILE64 )
@@ -2136,6 +2187,10 @@ else version (CRuntime_Musl)
 {
     int mknod(const scope char*, mode_t, dev_t);
 }
+else version (CRuntime_Urchin)
+{
+    int mknod(const scope char*, mode_t, dev_t);
+}
 else version (CRuntime_UClibc)
 {
     int mknod(const scope char*, mode_t, dev_t);
diff --git a/libphobos/libdruntime/core/sys/posix/sys/time.d b/libphobos/libdruntime/core/sys/posix/sys/time.d
index dda4caf0b..edbfda2d0 100644
--- a/libphobos/libdruntime/core/sys/posix/sys/time.d
+++ b/libphobos/libdruntime/core/sys/posix/sys/time.d
@@ -94,6 +94,18 @@ else version (CRuntime_Musl)
     pragma(mangle, muslRedirTime64Mangle!("utimes", "__utimes_time64"))
     int utimes(const scope char*, ref const(timeval)[2]);
 }
+else version (CRuntime_Urchin)
+{
+    struct timeval
+    {
+        time_t      tv_sec;
+        suseconds_t tv_usec;
+    }
+    pragma(mangle, urchinRedirTime64Mangle!("gettimeofday", "__gettimeofday_time64"))
+    int gettimeofday(timeval*, void*);
+    pragma(mangle, urchinRedirTime64Mangle!("utimes", "__utimes_time64"))
+    int utimes(const scope char*, ref const(timeval)[2]);
+}
 else version (Darwin)
 {
     struct timeval
diff --git a/libphobos/libdruntime/core/sys/posix/sys/types.d b/libphobos/libdruntime/core/sys/posix/sys/types.d
index 642b3839a..e58856aa0 100644
--- a/libphobos/libdruntime/core/sys/posix/sys/types.d
+++ b/libphobos/libdruntime/core/sys/posix/sys/types.d
@@ -137,6 +137,34 @@ version (linux)
         else
             alias long  time_t;
     }
+    else version (CRuntime_Urchin)
+    {
+        /**
+         * Urchin versions based on Musl versions before v1.2.0 (up to v1.1.24) had different
+         * definitions for `time_t` for 32 bits.
+         * This was changed to always be 64 bits in v1.2.0:
+         * https://musl.libc.org/time64.html
+         * This change was only for 32 bits system and
+         * didn't affect 64 bits systems
+         *
+         * To check previous definitions, `grep` for `time_t` in `arch/`,
+         * and the result should be (in v1.1.24):
+         * ---
+         * // arch/riscv64/bits/alltypes.h.in:20:TYPEDEF long time_t;
+         * // arch/s390x/bits/alltypes.h.in:17:TYPEDEF long time_t;
+         * // arch/sh/bits/alltypes.h.in:21:TYPEDEF long time_t;
+         * ---
+         *
+         * In order to be compatible with old versions of Musl,
+         * one can recompile druntime with `CRuntime_Musl_Pre_Time64`.
+         */
+        version (D_X32)
+           alias long   time_t;
+        else version (CRuntime_Urchin_Pre_Time64)
+            alias c_long time_t;
+        else
+            alias long  time_t;
+    }
     else
     {
         alias slong_t   time_t;
@@ -771,6 +799,82 @@ else version (CRuntime_Musl)
 
     alias c_ulong pthread_t;
 }
+else version (CRuntime_Urchin)
+{
+    version (D_LP64)
+    {
+        union pthread_attr_t
+        {
+            int[14] __i;
+            ulong[7] __s;
+        }
+
+        union pthread_cond_t
+        {
+            int[12] __i;
+            void*[6] __p;
+        }
+
+        union pthread_mutex_t
+        {
+            int[10] __i;
+            void*[5] __p;
+        }
+
+        union pthread_rwlock_t
+        {
+            int[14] __i;
+            void*[7] __p;
+        }
+    }
+    else
+    {
+        union pthread_attr_t
+        {
+            int[9] __i;
+            uint[9] __s;
+        }
+
+        union pthread_cond_t
+        {
+            int[12] __i;
+            void*[12] __p;
+        }
+
+        union pthread_mutex_t
+        {
+            int[6] __i;
+            void*[6] __p;
+        }
+
+        union pthread_rwlock_t
+        {
+            int[8] __i;
+            void*[8] __p;
+        }
+    }
+
+    struct pthread_rwlockattr_t
+    {
+        uint[2] __attr;
+    }
+
+    alias uint pthread_key_t;
+
+    struct pthread_condattr_t
+    {
+        uint __attr;
+    }
+
+    struct pthread_mutexattr_t
+    {
+        uint __attr;
+    }
+
+    alias int pthread_once_t;
+
+    alias c_ulong pthread_t;
+}
 else version (Darwin)
 {
     version (D_LP64)
@@ -1379,6 +1483,30 @@ else version (CRuntime_Musl)
         uint __attr;
     }
 }
+else version (CRuntime_Urchin)
+{
+    version (D_LP64)
+    {
+        union pthread_barrier_t
+        {
+            int[8] __i;
+            void*[4] __p;
+        }
+    }
+    else
+    {
+        union pthread_barrier_t
+        {
+            int[5] __i;
+            void*[5] __p;
+        }
+    }
+
+    struct pthread_barrierattr_t
+    {
+        uint __attr;
+    }
+}
 else version (CRuntime_UClibc)
 {
     struct pthread_barrier_t
@@ -1437,6 +1565,10 @@ else version (CRuntime_Musl)
 {
     alias int pthread_spinlock_t;
 }
+else version (CRuntime_Urchin)
+{
+    alias int pthread_spinlock_t;
+}
 
 //
 // Timer (TMR)
diff --git a/libphobos/libdruntime/core/sys/posix/sys/uio.d b/libphobos/libdruntime/core/sys/posix/sys/uio.d
index e2839631e..29f30b6b5 100644
--- a/libphobos/libdruntime/core/sys/posix/sys/uio.d
+++ b/libphobos/libdruntime/core/sys/posix/sys/uio.d
@@ -145,6 +145,17 @@ else version (CRuntime_Musl)
     ssize_t readv(int, const scope iovec*, int);
     ssize_t writev(int, const scope iovec*, int);
 }
+else version (CRuntime_Urchin)
+{
+    struct iovec
+    {
+        void*  iov_base;
+        size_t iov_len;
+    }
+
+    ssize_t readv(int, const scope iovec*, int);
+    ssize_t writev(int, const scope iovec*, int);
+}
 else version (CRuntime_UClibc)
 {
     struct iovec
diff --git a/libphobos/libdruntime/core/sys/posix/sys/utsname.d b/libphobos/libdruntime/core/sys/posix/sys/utsname.d
index 5de50aca4..605937a23 100644
--- a/libphobos/libdruntime/core/sys/posix/sys/utsname.d
+++ b/libphobos/libdruntime/core/sys/posix/sys/utsname.d
@@ -170,6 +170,22 @@ else version (CRuntime_Musl)
 
     int uname(utsname*);
 }
+else version (CRuntime_Urchin)
+{
+    private enum SYS_NMLN = 65;
+
+    struct utsname
+    {
+        char[SYS_NMLN] sysname = 0;
+        char[SYS_NMLN] nodename = 0;
+        char[SYS_NMLN] release = 0;
+        char[SYS_NMLN] _version = 0;
+        char[SYS_NMLN] machine = 0;
+        char[SYS_NMLN] domainname = 0;
+    }
+
+    int uname(utsname*);
+}
 else version (CRuntime_UClibc)
 {
     private enum utsNameLength = 65;
diff --git a/libphobos/libdruntime/core/sys/posix/sys/wait.d b/libphobos/libdruntime/core/sys/posix/sys/wait.d
index f6b0674a3..5c04dafc3 100644
--- a/libphobos/libdruntime/core/sys/posix/sys/wait.d
+++ b/libphobos/libdruntime/core/sys/posix/sys/wait.d
@@ -259,6 +259,17 @@ else version (CRuntime_Musl)
     extern (D) int  WTERMSIG( int status ) { return status & 0x7F; }
     alias WEXITSTATUS WSTOPSIG;
 }
+else version (CRuntime_Urchin)
+{
+    @safe pure:
+    extern (D) int  WEXITSTATUS( int status ) { return ( status & 0xFF00 ) >> 8; }
+    extern (D) int  WIFCONTINUED( int status ) { return status == 0xffff; }
+    extern (D) bool WIFEXITED( int status ) { return WTERMSIG( status ) == 0; }
+    extern (D) bool WIFSIGNALED( int status ) { return (status&0xffff)-1U < 0xffU; }
+    extern (D) bool WIFSTOPPED( int status ) { return cast(short)(((status&0xffff)*0x10001)>>8) > 0x7f00; }
+    extern (D) int  WTERMSIG( int status ) { return status & 0x7F; }
+    alias WEXITSTATUS WSTOPSIG;
+}
 else version (CRuntime_UClibc)
 {
     @safe pure:
@@ -474,6 +485,10 @@ else version (CRuntime_Musl)
 {
     int waitid(idtype_t, id_t, siginfo_t*, int);
 }
+else version (CRuntime_Urchin)
+{
+    int waitid(idtype_t, id_t, siginfo_t*, int);
+}
 else version (CRuntime_UClibc)
 {
     int waitid(idtype_t, id_t, siginfo_t*, int);
diff --git a/libphobos/libdruntime/core/sys/posix/syslog.d b/libphobos/libdruntime/core/sys/posix/syslog.d
index ba2a4ac03..d7770d1e3 100644
--- a/libphobos/libdruntime/core/sys/posix/syslog.d
+++ b/libphobos/libdruntime/core/sys/posix/syslog.d
@@ -586,3 +586,63 @@ else version (CRuntime_Musl)
     void syslog (int __pri, const char *__fmt, ...);
     void closelog();
 }
+else version (CRuntime_Urchin)
+{
+    //PRIORITY
+    enum {
+        LOG_EMERG = 0,     /* system is unusable */
+        LOG_ALERT = 1,     /* action must be taken immediately */
+        LOG_CRIT  = 2,     /* critical conditions */
+        LOG_ERR   = 3,     /* error conditions */
+        LOG_WARNING = 4,   /* warning conditions */
+        LOG_NOTICE  = 5,   /* normal but significant condition */
+        LOG_INFO    = 6,   /* informational */
+        LOG_DEBUG   = 7,   /* debug-level messages */
+    }
+
+    //OPTIONS
+    enum {
+        LOG_PID    = 0x01,  /* log the pid with each message */
+        LOG_CONS   = 0x02,  /* log on the console if errors in sending */
+        LOG_ODELAY = 0x04,  /* delay open until first syslog() (default) */
+        LOG_NDELAY = 0x08,  /* don't delay open */
+        LOG_NOWAIT = 0x10,  /* don't wait for console forks: DEPRECATED */
+        LOG_PERROR = 0x20,  /* log to stderr as well */
+    }
+
+    //FACILITY
+    enum {
+        LOG_KERN   = (0<<3),  /* kernel messages */
+        LOG_USER   = (1<<3),  /* random user-level messages */
+        LOG_MAIL   = (2<<3),  /* mail system */
+        LOG_DAEMON = (3<<3),  /* system daemons */
+        LOG_AUTH   = (4<<3),  /* security/authorization messages */
+        LOG_SYSLOG = (5<<3),  /* messages generated internally by syslogd */
+        LOG_LPR    = (6<<3),  /* line printer subsystem */
+        LOG_NEWS   = (7<<3),  /* network news subsystem */
+        LOG_UUCP   = (8<<3),  /* UUCP subsystem */
+        LOG_CRON   = (9<<3),  /* clock daemon */
+        LOG_AUTHPRIV = (10<<3), /* security/authorization messages (private), */
+        LOG_FTP    =  (11<<3), /* ftp daemon */
+
+        /* other codes through 15 reserved for system use */
+        LOG_LOCAL0 = (16<<3), /* reserved for local use */
+        LOG_LOCAL1 = (17<<3), /* reserved for local use */
+        LOG_LOCAL2 = (18<<3), /* reserved for local use */
+        LOG_LOCAL3 = (19<<3), /* reserved for local use */
+        LOG_LOCAL4 = (20<<3), /* reserved for local use */
+        LOG_LOCAL5 = (21<<3), /* reserved for local use */
+        LOG_LOCAL6 = (22<<3), /* reserved for local use */
+        LOG_LOCAL7 = (23<<3), /* reserved for local use */
+
+        LOG_NFACILITIES = 24,  /* current number of facilities */
+    }
+
+    int LOG_MASK(int pri) { return 1 << pri; }        /* mask for one priority */
+    int LOG_UPTO(int pri) { return (1 << (pri+1)) - 1; }  /* all priorities through pri */
+
+    void openlog (const char *, int __option, int __facility);
+    int  setlogmask (int __mask);
+    void syslog (int __pri, const char *__fmt, ...);
+    void closelog();
+}
diff --git a/libphobos/libdruntime/core/sys/posix/time.d b/libphobos/libdruntime/core/sys/posix/time.d
index f49764d19..78f8e8721 100644
--- a/libphobos/libdruntime/core/sys/posix/time.d
+++ b/libphobos/libdruntime/core/sys/posix/time.d
@@ -86,6 +86,11 @@ else version (CRuntime_Musl)
     pragma(mangle, muslRedirTime64Mangle!("timegm", "__timegm_time64"))
     time_t timegm(tm*);
 }
+else version (CRuntime_Urchin)
+{
+    pragma(mangle, urchinRedirTime64Mangle!("timegm", "__timegm_time64"))
+    time_t timegm(tm*);
+}
 else version (CRuntime_UClibc)
 {
     time_t timegm(tm*);
@@ -502,6 +507,49 @@ else version (CRuntime_Musl)
     int timer_settime(timer_t, int, const scope itimerspec*, itimerspec*);
     int timer_getoverrun(timer_t);
 }
+else version (CRuntime_Urchin)
+{
+    alias int clockid_t;
+    alias void* timer_t;
+
+    struct itimerspec
+    {
+        timespec it_interval;
+        timespec it_value;
+    }
+
+    enum TIMER_ABSTIME = 1;
+
+    enum CLOCK_REALTIME = 0;
+    enum CLOCK_PROCESS_CPUTIME_ID = 2;
+    enum CLOCK_THREAD_CPUTIME_ID = 3;
+    enum CLOCK_REALTIME_COARSE = 5;
+    enum CLOCK_BOOTTIME = 7;
+    enum CLOCK_REALTIME_ALARM = 8;
+    enum CLOCK_BOOTTIME_ALARM = 9;
+    enum CLOCK_SGI_CYCLE = 10;
+    enum CLOCK_TAI = 11;
+
+    int nanosleep(const scope timespec*, timespec*);
+
+    pragma(mangle, urchinRedirTime64Mangle!("clock_getres", "__clock_getres_time64"))
+    int clock_getres(clockid_t, timespec*);
+    pragma(mangle, urchinRedirTime64Mangle!("clock_gettime", "__clock_gettime64"))
+    int clock_gettime(clockid_t, timespec*);
+    pragma(mangle, urchinRedirTime64Mangle!("clock_settime", "__clock_settime64"))
+    int clock_settime(clockid_t, const scope timespec*);
+    pragma(mangle, urchinRedirTime64Mangle!("clock_nanosleep", "__clock_nanosleep_time64"))
+    int clock_nanosleep(clockid_t, int, const scope timespec*, timespec*);
+    int clock_getcpuclockid(pid_t, clockid_t *);
+
+    int timer_create(clockid_t, sigevent*, timer_t*);
+    int timer_delete(timer_t);
+    pragma(mangle, urchinRedirTime64Mangle!("timer_gettime", "__timer_gettime64"))
+    int timer_gettime(timer_t, itimerspec*);
+    pragma(mangle, urchinRedirTime64Mangle!("timer_settime", "__timer_settime64"))
+    int timer_settime(timer_t, int, const scope itimerspec*, itimerspec*);
+    int timer_getoverrun(timer_t);
+}
 else version (CRuntime_UClibc)
 {
     enum CLOCK_REALTIME             = 0;
@@ -610,6 +658,16 @@ else version (CRuntime_Musl)
     pragma(mangle, muslRedirTime64Mangle!("localtime_r", "__localtime64_r"))
     tm*   localtime_r(const scope time_t*, tm*);
 }
+else version (CRuntime_Urchin)
+{
+    char* asctime_r(const scope tm*, char*);
+    pragma(mangle, urchinRedirTime64Mangle!("ctime_r", "__ctime64_r"))
+    char* ctime_r(const scope time_t*, char*);
+    pragma(mangle, urchinRedirTime64Mangle!("gmtime_r", "__gmtime64_r"))
+    tm*   gmtime_r(const scope time_t*, tm*);
+    pragma(mangle, urchinRedirTime64Mangle!("localtime_r", "__localtime64_r"))
+    tm*   localtime_r(const scope time_t*, tm*);
+}
 else version (CRuntime_UClibc)
 {
     char* asctime_r(const scope tm*, char*);
@@ -695,6 +753,14 @@ else version (CRuntime_Musl)
     tm*   getdate(const scope char*);
     char* strptime(const scope char*, const scope char*, tm*);
 }
+else version (CRuntime_Urchin)
+{
+    extern __gshared int daylight;
+    extern __gshared c_long timezone;
+
+    tm*   getdate(const scope char*);
+    char* strptime(const scope char*, const scope char*, tm*);
+}
 else version (CRuntime_UClibc)
 {
     extern __gshared int    daylight;
diff --git a/libphobos/libdruntime/core/sys/posix/unistd.d b/libphobos/libdruntime/core/sys/posix/unistd.d
index d1300e1e0..9889881e6 100644
--- a/libphobos/libdruntime/core/sys/posix/unistd.d
+++ b/libphobos/libdruntime/core/sys/posix/unistd.d
@@ -185,6 +185,13 @@ else version (CRuntime_Musl)
     alias ftruncate ftruncate64;
     alias lseek lseek64;
 }
+else version (CRuntime_Urchin)
+{
+    int ftruncate(int, off_t) @trusted;
+    off_t lseek(int, off_t, int) @trusted;
+    alias ftruncate ftruncate64;
+    alias lseek lseek64;
+}
 else version (CRuntime_UClibc)
 {
   static if ( __USE_FILE_OFFSET64 )
@@ -2008,6 +2015,248 @@ else version (CRuntime_Musl)
         _SC_THREAD_ROBUST_PRIO_PROTECT
     }
 }
+else version (CRuntime_Urchin)
+{
+    enum F_OK       = 0;
+    enum R_OK       = 4;
+    enum W_OK       = 2;
+    enum X_OK       = 1;
+
+    enum F_ULOCK    = 0;
+    enum F_LOCK     = 1;
+    enum F_TLOCK    = 2;
+    enum F_TEST     = 3;
+
+    enum
+    {
+        _CS_PATH,
+        _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS,
+        _CS_GNU_LIBC_VERSION,
+        _CS_GNU_LIBPTHREAD_VERSION,
+        _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS,
+        _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS,
+
+        _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,
+        _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,
+        _CS_POSIX_V6_ILP32_OFF32_LIBS,
+        _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,
+        _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,
+        _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,
+        _CS_POSIX_V6_ILP32_OFFBIG_LIBS,
+        _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,
+        _CS_POSIX_V6_LP64_OFF64_CFLAGS,
+        _CS_POSIX_V6_LP64_OFF64_LDFLAGS,
+        _CS_POSIX_V6_LP64_OFF64_LIBS,
+        _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,
+        _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,
+        _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,
+        _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,
+        _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,
+        _CS_POSIX_V7_ILP32_OFF32_CFLAGS,
+        _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,
+        _CS_POSIX_V7_ILP32_OFF32_LIBS,
+        _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,
+        _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,
+        _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,
+        _CS_POSIX_V7_ILP32_OFFBIG_LIBS,
+        _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,
+        _CS_POSIX_V7_LP64_OFF64_CFLAGS,
+        _CS_POSIX_V7_LP64_OFF64_LDFLAGS,
+        _CS_POSIX_V7_LP64_OFF64_LIBS,
+        _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,
+        _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,
+        _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,
+        _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,
+        _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,
+        _CS_V6_ENV,
+        _CS_V7_ENV
+    }
+
+    enum
+    {
+        _PC_LINK_MAX,
+        _PC_MAX_CANON,
+        _PC_MAX_INPUT,
+        _PC_NAME_MAX,
+        _PC_PATH_MAX,
+        _PC_PIPE_BUF,
+        _PC_CHOWN_RESTRICTED,
+        _PC_NO_TRUNC,
+        _PC_VDISABLE,
+        _PC_SYNC_IO,
+        _PC_ASYNC_IO,
+        _PC_PRIO_IO,
+        _PC_SOCK_MAXBUF,
+        _PC_FILESIZEBITS,
+        _PC_REC_INCR_XFER_SIZE,
+        _PC_REC_MAX_XFER_SIZE,
+        _PC_REC_MIN_XFER_SIZE,
+        _PC_REC_XFER_ALIGN,
+        _PC_ALLOC_SIZE_MIN,
+        _PC_SYMLINK_MAX,
+        _PC_2_SYMLINKS
+    }
+
+    enum
+    {
+        _SC_ARG_MAX,
+        _SC_CHILD_MAX,
+        _SC_CLK_TCK,
+        _SC_NGROUPS_MAX,
+        _SC_OPEN_MAX,
+        _SC_STREAM_MAX,
+        _SC_TZNAME_MAX,
+        _SC_JOB_CONTROL,
+        _SC_SAVED_IDS,
+        _SC_REALTIME_SIGNALS,
+        _SC_PRIORITY_SCHEDULING,
+        _SC_TIMERS,
+        _SC_ASYNCHRONOUS_IO,
+        _SC_PRIORITIZED_IO,
+        _SC_SYNCHRONIZED_IO,
+        _SC_FSYNC,
+        _SC_MAPPED_FILES,
+        _SC_MEMLOCK,
+        _SC_MEMLOCK_RANGE,
+        _SC_MEMORY_PROTECTION,
+        _SC_MESSAGE_PASSING,
+        _SC_SEMAPHORES,
+        _SC_SHARED_MEMORY_OBJECTS,
+        _SC_AIO_LISTIO_MAX,
+        _SC_AIO_MAX,
+        _SC_AIO_PRIO_DELTA_MAX,
+        _SC_DELAYTIMER_MAX,
+        _SC_MQ_OPEN_MAX,
+        _SC_MQ_PRIO_MAX,
+        _SC_VERSION,
+        _SC_PAGE_SIZE,
+        _SC_PAGESIZE = _SC_PAGE_SIZE,
+        _SC_RTSIG_MAX,
+        _SC_SEM_NSEMS_MAX,
+        _SC_SEM_VALUE_MAX,
+        _SC_SIGQUEUE_MAX,
+        _SC_TIMER_MAX,
+        _SC_BC_BASE_MAX,
+        _SC_BC_DIM_MAX,
+        _SC_BC_SCALE_MAX,
+        _SC_BC_STRING_MAX,
+        _SC_COLL_WEIGHTS_MAX,
+
+        _SC_EXPR_NEST_MAX = 42,
+        _SC_LINE_MAX,
+        _SC_RE_DUP_MAX,
+
+        _SC_2_VERSION = 46,
+        _SC_2_C_BIND,
+        _SC_2_C_DEV,
+        _SC_2_FORT_DEV,
+        _SC_2_FORT_RUN,
+        _SC_2_SW_DEV,
+        _SC_2_LOCALEDEF,
+
+        _SC_UIO_MAXIOV = 60,
+        _SC_IOV_MAX = _SC_UIO_MAXIOV,
+
+        _SC_THREADS = 67,
+        _SC_THREAD_SAFE_FUNCTIONS,
+        _SC_GETGR_R_SIZE_MAX,
+        _SC_GETPW_R_SIZE_MAX,
+        _SC_LOGIN_NAME_MAX,
+        _SC_TTY_NAME_MAX,
+        _SC_THREAD_DESTRUCTOR_ITERATIONS,
+        _SC_THREAD_KEYS_MAX,
+        _SC_THREAD_STACK_MIN,
+        _SC_THREAD_THREADS_MAX,
+        _SC_THREAD_ATTR_STACKADDR,
+        _SC_THREAD_ATTR_STACKSIZE,
+        _SC_THREAD_PRIORITY_SCHEDULING,
+        _SC_THREAD_PRIO_INHERIT,
+        _SC_THREAD_PRIO_PROTECT,
+        _SC_THREAD_PROCESS_SHARED,
+
+        _SC_NPROCESSORS_CONF,
+        _SC_NPROCESSORS_ONLN,
+        _SC_PHYS_PAGES,
+        _SC_AVPHYS_PAGES,
+        _SC_ATEXIT_MAX,
+        _SC_PASS_MAX,
+
+        _SC_XOPEN_VERSION,
+        _SC_XOPEN_XCU_VERSION,
+        _SC_XOPEN_UNIX,
+        _SC_XOPEN_CRYPT,
+        _SC_XOPEN_ENH_I18N,
+        _SC_XOPEN_SHM,
+
+        _SC_2_CHAR_TERM,
+        _SC_2_UPE = 97,
+
+        _SC_XOPEN_XPG2,
+        _SC_XOPEN_XPG3,
+        _SC_XOPEN_XPG4,
+
+        _SC_NZERO = 109,
+
+        _SC_XBS5_ILP32_OFF32 = 125,
+        _SC_XBS5_ILP32_OFFBIG,
+        _SC_XBS5_LP64_OFF64,
+        _SC_XBS5_LPBIG_OFFBIG,
+
+        _SC_XOPEN_LEGACY,
+        _SC_XOPEN_REALTIME,
+        _SC_XOPEN_REALTIME_THREADS,
+
+        _SC_ADVISORY_INFO,
+        _SC_BARRIERS,
+        _SC_CLOCK_SELECTION = 137,
+        _SC_CPUTIME,
+        _SC_THREAD_CPUTIME,
+        _SC_MONOTONIC_CLOCK = 149,
+        _SC_READER_WRITER_LOCKS = 153,
+        _SC_SPIN_LOCKS,
+        _SC_REGEXP,
+        _SC_SHELL = 157,
+        _SC_SPAWN = 159,
+        _SC_SPORADIC_SERVER,
+        _SC_THREAD_SPORADIC_SERVER,
+        _SC_TIMEOUTS = 164,
+        _SC_TYPED_MEMORY_OBJECTS,
+        _SC_2_PBS = 168,
+        _SC_2_PBS_ACCOUNTING,
+        _SC_2_PBS_LOCATE,
+        _SC_2_PBS_MESSAGE,
+        _SC_2_PBS_TRACK,
+        _SC_SYMLOOP_MAX,
+        _SC_STREAMS,
+        _SC_2_PBS_CHECKPOINT,
+
+        _SC_V6_ILP32_OFF32,
+        _SC_V6_ILP32_OFFBIG,
+        _SC_V6_LP64_OFF64,
+        _SC_V6_LPBIG_OFFBIG,
+
+        _SC_HOST_NAME_MAX,
+        _SC_TRACE,
+        _SC_TRACE_EVENT_FILTER,
+        _SC_TRACE_INHERIT,
+        _SC_TRACE_LOG,
+
+        _SC_IPV6 = 235,
+        _SC_RAW_SOCKETS,
+        _SC_V7_ILP32_OFF32,
+        _SC_V7_ILP32_OFFBIG,
+        _SC_V7_LP64_OFF64,
+        _SC_V7_LPBIG_OFFBIG,
+        _SC_SS_REPL_MAX,
+        _SC_TRACE_EVENT_NAME_MAX,
+        _SC_TRACE_NAME_MAX,
+        _SC_TRACE_SYS_MAX,
+        _SC_TRACE_USER_EVENT_MAX,
+        _SC_XOPEN_STREAMS,
+        _SC_THREAD_ROBUST_PRIO_INHERIT,
+        _SC_THREAD_ROBUST_PRIO_PROTECT
+    }
+}
 else version (CRuntime_UClibc)
 {
     enum F_OK       = 0;
@@ -2363,6 +2612,10 @@ else version (CRuntime_Musl)
 {
     int fsync(int) @trusted;
 }
+else version (CRuntime_Urchin)
+{
+    int fsync(int) @trusted;
+}
 else version (Solaris)
 {
     int fsync(int) @trusted;
@@ -2477,6 +2730,12 @@ else version (CRuntime_Musl)
     int lockf(int, int, off_t);
     alias lockf lockf64;
 }
+else version (CRuntime_Urchin)
+{
+    int fchdir(int) @trusted;
+    int lockf(int, int, off_t);
+    alias lockf lockf64;
+}
 else version (Darwin)
 {
     char*      crypt(const scope char*, const scope char*);
@@ -2760,6 +3019,10 @@ else version (CRuntime_Musl)
 {
     extern __gshared const char** environ;
 }
+else version (CRuntime_Urchin)
+{
+    extern __gshared const char** environ;
+}
 else version (Solaris)
 {
     extern __gshared const char** environ;
diff --git a/libphobos/libdruntime/core/sys/posix/utime.d b/libphobos/libdruntime/core/sys/posix/utime.d
index e7059d712..35a4c670f 100644
--- a/libphobos/libdruntime/core/sys/posix/utime.d
+++ b/libphobos/libdruntime/core/sys/posix/utime.d
@@ -65,6 +65,17 @@ else version (CRuntime_Musl)
     pragma(mangle, muslRedirTime64Mangle!("utime", "__utime64"))
     int utime(const scope char*, const scope utimbuf*);
 }
+else version (CRuntime_Urchin)
+{
+    struct utimbuf
+    {
+        time_t  actime;
+        time_t  modtime;
+    }
+
+    pragma(mangle, urchinRedirTime64Mangle!("utime", "__utime64"))
+    int utime(const scope char*, const scope utimbuf*);
+}
 else version (Darwin)
 {
     struct utimbuf
diff --git a/libphobos/libdruntime/core/thread/osthread.d b/libphobos/libdruntime/core/thread/osthread.d
index a9fcf9625..1a14b6019 100644
--- a/libphobos/libdruntime/core/thread/osthread.d
+++ b/libphobos/libdruntime/core/thread/osthread.d
@@ -1612,6 +1612,7 @@ extern (C) @nogc nothrow
     version (CRuntime_Glibc)  version = PThread_Getattr_NP;
     version (CRuntime_Bionic) version = PThread_Getattr_NP;
     version (CRuntime_Musl)   version = PThread_Getattr_NP;
+    version (CRuntime_Urchin) version = PThread_Getattr_NP;
     version (CRuntime_UClibc) version = PThread_Getattr_NP;
 
     version (FreeBSD)         version = PThread_Attr_Get_NP;
diff --git a/libphobos/libdruntime/gcc/sections/elf.d b/libphobos/libdruntime/gcc/sections/elf.d
index a67dd4a42..0e42dc51e 100644
--- a/libphobos/libdruntime/gcc/sections/elf.d
+++ b/libphobos/libdruntime/gcc/sections/elf.d
@@ -31,6 +31,7 @@ version (SystemZ) version = IBMZ_Any;
 
 version (CRuntime_Glibc) enum SharedELF = true;
 else version (CRuntime_Musl) enum SharedELF = true;
+else version (CRuntime_Urchin) enum SharedELF = true;
 else version (FreeBSD) enum SharedELF = true;
 else version (NetBSD) enum SharedELF = true;
 else version (OpenBSD) enum SharedELF = true;
@@ -758,6 +759,8 @@ version (Shared)
             {
                 version (CRuntime_Musl)
                     strtab = cast(const(char)*)(info.dlpi_addr + dyn.d_un.d_ptr); // relocate
+                else version (CRuntime_Urchin)
+                    strtab = cast(const(char)*)(info.dlpi_addr + dyn.d_un.d_ptr); // relocate
                 else version (linux)
                 {
                     // This might change in future glibc releases (after 2.29) as dynamic sections
@@ -1085,6 +1088,8 @@ void[] getTLSRange(size_t mod, size_t sz) nothrow @nogc
         auto ti = tls_index(mod, 0);
         version (CRuntime_Musl)
             return (__tls_get_addr(&ti)-TLS_DTV_OFFSET)[0 .. sz];
+        else version (CRuntime_Urchin)
+            return (__tls_get_addr(&ti)-TLS_DTV_OFFSET)[0 .. sz];
         else version (IBMZ_Any)
         {
             // IBM Z only provides __tls_get_offset instead of __tls_get_addr
diff --git a/libphobos/libdruntime/gcc/sections/package.d b/libphobos/libdruntime/gcc/sections/package.d
index 6a2459443..306e55d7f 100644
--- a/libphobos/libdruntime/gcc/sections/package.d
+++ b/libphobos/libdruntime/gcc/sections/package.d
@@ -24,6 +24,7 @@ module gcc.sections;
 
 version (CRuntime_Glibc)  version = SectionsElf;
 version (CRuntime_Musl)   version = SectionsElf;
+version (CRuntime_Urchin) version = SectionsElf;
 version (CRuntime_UClibc) version = SectionsElf;
 version (FreeBSD)         version = SectionsElf;
 version (NetBSD)          version = SectionsElf;
diff --git a/libphobos/libdruntime/rt/sections.d b/libphobos/libdruntime/rt/sections.d
index 65f57892e..49816ead0 100644
--- a/libphobos/libdruntime/rt/sections.d
+++ b/libphobos/libdruntime/rt/sections.d
@@ -28,6 +28,8 @@ else version (CRuntime_Glibc)
     public import rt.sections_elf_shared;
 else version (CRuntime_Musl)
     public import rt.sections_elf_shared;
+else version (CRuntime_Urchin)
+    public import rt.sections_elf_shared;
 else version (FreeBSD)
     public import rt.sections_elf_shared;
 else version (NetBSD)
diff --git a/libphobos/src/std/datetime/timezone.d b/libphobos/src/std/datetime/timezone.d
index b23891808..f51b0dcb3 100644
--- a/libphobos/src/std/datetime/timezone.d
+++ b/libphobos/src/std/datetime/timezone.d
@@ -714,6 +714,9 @@ public:
         // tzname, called from dstName, isn't set by default for Musl.
         version (CRuntime_Musl)
             assert(LocalTime().dstName is null);
+        // tzname, called from dstName, isn't set by default for Urchin.
+        else version (CRuntime_Urchin)
+            assert(LocalTime().dstName is null);
         else
             assert(LocalTime().dstName !is null);
 
diff --git a/libphobos/src/std/experimental/allocator/building_blocks/region.d b/libphobos/src/std/experimental/allocator/building_blocks/region.d
index a23746a23..0d5d7e116 100644
--- a/libphobos/src/std/experimental/allocator/building_blocks/region.d
+++ b/libphobos/src/std/experimental/allocator/building_blocks/region.d
@@ -900,6 +900,10 @@ version (CRuntime_Musl)
     // https://git.musl-libc.org/cgit/musl/commit/?id=7a995fe706e519a4f55399776ef0df9596101f93
     // https://git.musl-libc.org/cgit/musl/commit/?id=863d628d93ea341b6a32661a1654320ce69f6a07
 }
+version (CRuntime_Urchin)
+{
+    // sbrk and brk are disabled in Urchin:
+}
 version (DragonFlyBSD)
 {
     // sbrk is deprecated in favor of mmap   (we could implement a mmap + MAP_NORESERVE + PROT_NONE version)
@@ -926,6 +930,7 @@ SbrkRegion) adversely.
 
 */
 version (CRuntime_Musl) {} else
+version (CRuntime_Urchin) {} else
 version (DragonFlyBSD) {} else
 version (Posix) struct SbrkRegion(uint minAlign = platformAlignment)
 {
@@ -1109,6 +1114,7 @@ version (Posix) struct SbrkRegion(uint minAlign = platformAlignment)
 }
 
 version (CRuntime_Musl) {} else
+version (CRuntime_Urchin) {} else
 version (DragonFlyBSD) {} else
 version (Posix) @system nothrow @nogc unittest
 {
@@ -1123,6 +1129,7 @@ version (Posix) @system nothrow @nogc unittest
 }
 
 version (CRuntime_Musl) {} else
+version (CRuntime_Urchin) {} else
 version (DragonFlyBSD) {} else
 version (Posix) @system nothrow @nogc unittest
 {
diff --git a/libphobos/src/std/stdio.d b/libphobos/src/std/stdio.d
index 40dc85420..d4fec82b1 100644
--- a/libphobos/src/std/stdio.d
+++ b/libphobos/src/std/stdio.d
@@ -137,6 +137,10 @@ else version (CRuntime_Musl)
 {
     version = GENERIC_IO;
 }
+else version (CRuntime_Urchin)
+{
+    version = GENERIC_IO;
+}
 else version (CRuntime_UClibc)
 {
     version = GENERIC_IO;
@@ -1352,7 +1356,7 @@ Throws: `Exception` if the file is not opened.
 
         // Some libc sanitize the whence input (e.g. glibc), but some don't,
         // e.g. Microsoft runtime crashes on an invalid origin,
-        // and Musl additionally accept SEEK_DATA & SEEK_HOLE (Linux extension).
+        // and Musl/Urchin additionally accept SEEK_DATA & SEEK_HOLE (Linux extension).
         // To provide a consistent behavior cross platform, we use the glibc check
         // See also https://issues.dlang.org/show_bug.cgi?id=19797
         enforce(origin == SEEK_SET || origin == SEEK_CUR ||  origin == SEEK_END,
diff --git a/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc b/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc
index 607ecae68..808dae015 100644
--- a/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc
+++ b/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc
@@ -127,7 +127,7 @@ extern const short *_toupper_tab_;
 extern const short *_tolower_tab_;
 #endif
 
-#if SANITIZER_MUSL && \
+#if (SANITIZER_MUSL || SANITIZER_URCHIN) && \
   (defined(__i386__) || defined(__arm__) || SANITIZER_MIPS32 || SANITIZER_PPC32)
 // musl 1.2.0 on existing 32-bit architectures uses new symbol names for the
 // time-related functions that take 64-bit time_t values.  See
diff --git a/libsanitizer/sanitizer_common/sanitizer_platform.h b/libsanitizer/sanitizer_common/sanitizer_platform.h
index 3e1b078a0..8cf8114d1 100644
--- a/libsanitizer/sanitizer_common/sanitizer_platform.h
+++ b/libsanitizer/sanitizer_common/sanitizer_platform.h
@@ -130,12 +130,18 @@
 #endif
 
 // Assume linux that is not glibc or android is musl libc.
-#if SANITIZER_LINUX && !SANITIZER_GLIBC && !SANITIZER_ANDROID
+#if SANITIZER_LINUX && !SANITIZER_GLIBC && !SANITIZER_ANDROID && !SANITIZER_URCHIN
 #  define SANITIZER_MUSL 1
 #else
 #  define SANITIZER_MUSL 0
 #endif
 
+#if SANITIZER_LINUX && !SANITIZER_GLIBC && !SANITIZER_ANDROID && !SANITIZER_MUSL
+#  define SANITIZER_URCHIN 1
+#else
+#  define SANITIZER_URCHIN 0
+#endif
+
 #define SANITIZER_POSIX                                     \
   (SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_APPLE || \
    SANITIZER_NETBSD || SANITIZER_SOLARIS)
diff --git a/libstdc++-v3/configure.host b/libstdc++-v3/configure.host
index 7bc430716..000571ecf 100644
--- a/libstdc++-v3/configure.host
+++ b/libstdc++-v3/configure.host
@@ -255,7 +255,7 @@ case "${host_os}" in
   freebsd*)
     os_include_dir="os/bsd/freebsd"
     ;;
-  linux-musl*)
+  linux-musl*|linux-urchin)
     os_include_dir="os/generic"
     ;;
   gnu* | linux* | kfreebsd*-gnu | uclinux*)
